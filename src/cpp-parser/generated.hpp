ENTITY(entity_n_char, Or<And<UnimplementedTODO<> /* textnormal{ 'any' 'member' 'of' 'the' 'translation' 'character' 'set' 'except' 'the' unicode{ '007d' } 'or' 'new-line' 'character' } */>>);
ENTITY(entity_n_char_sequence, List<Entity<entity_n_char>>);
ENTITY(entity_named_universal_character, Or<And<Terminal<R"raw(\)raw">, Terminal<R"raw(N{)raw">, Entity<entity_n_char_sequence>, Terminal<R"raw(})raw">>>);
ENTITY(entity_hex_quad, Or<And<Entity<entity_hexadecimal_digit>, Entity<entity_hexadecimal_digit>, Entity<entity_hexadecimal_digit>, Entity<entity_hexadecimal_digit>>>);
ENTITY(entity_simple_hexadecimal_digit_sequence, List<Entity<entity_hexadecimal_digit>>);
ENTITY(entity_universal_character_name, Or<And<Terminal<R"raw(\)raw">, Terminal<R"raw(u)raw">, Entity<entity_hex_quad>>, And<Terminal<R"raw(\)raw">, Terminal<R"raw(U)raw">, Entity<entity_hex_quad>, Entity<entity_hex_quad>>, And<Terminal<R"raw(\)raw">, Terminal<R"raw(u{)raw">, Entity<entity_simple_hexadecimal_digit_sequence>, Terminal<R"raw(})raw">>, And<Entity<entity_named_universal_character>>>);
ENTITY(entity_preprocessing_token, Or<And<Entity<entity_header_name>>, And<Entity<entity_import_keyword>>, And<Entity<entity_module_keyword>>, And<Entity<entity_export_keyword>>, And<Entity<entity_identifier>>, And<Entity<entity_pp_number>>, And<Entity<entity_character_literal>>, And<Entity<entity_user_defined_character_literal>>, And<Entity<entity_string_literal>>, And<Entity<entity_user_defined_string_literal>>, And<Entity<entity_preprocessing_op_or_punc>>, And<UnimplementedTODO<> /* textnormal{ 'each' 'non-whitespace' 'character' 'that' 'cannot' 'be' 'one' 'of' 'the' 'above' } */>>);
ENTITY(entity_header_name, Or<And<Terminal<R"raw(<)raw">, Entity<entity_h_char_sequence>, Terminal<R"raw(>)raw">>, And<Terminal<R"raw(")raw">, Entity<entity_q_char_sequence>, Terminal<R"raw(")raw">>>);
ENTITY(entity_h_char_sequence, List<Entity<entity_h_char>>);
ENTITY(entity_h_char, Or<And<UnimplementedTODO<> /* textnormal{ 'any' 'member' 'of' 'the' 'translation' 'character' 'set' 'except' 'new-line' 'and' unicode{ '003e' } } */>>);
ENTITY(entity_q_char_sequence, List<Entity<entity_q_char>>);
ENTITY(entity_q_char, Or<And<UnimplementedTODO<> /* textnormal{ 'any' 'member' 'of' 'the' 'translation' 'character' 'set' 'except' 'new-line' 'and' unicode{ '0022' } } */>>);
ENTITY(entity_pp_number, And<Entity<entity_pp_number_impl_start>, List<Entity<entity_pp_number_impl_continue>, 0>>);
ENTITY(entity_pp_number_impl_start, Or<And<Entity<entity_digit>>, And<Terminal<R"raw(.)raw">, Entity<entity_digit>>>);
ENTITY(entity_pp_number_impl_continue, Or<And<Entity<entity_identifier_continue>>, And<Terminal<R"raw(')raw">, Entity<entity_digit>>, And<Terminal<R"raw(')raw">, Entity<entity_nondigit>>, And<Terminal<R"raw(e)raw">, Entity<entity_sign>>, And<Terminal<R"raw(E)raw">, Entity<entity_sign>>, And<Terminal<R"raw(p)raw">, Entity<entity_sign>>, And<Terminal<R"raw(P)raw">, Entity<entity_sign>>, And<Terminal<R"raw(.)raw">>>);
ENTITY(entity_preprocessing_op_or_punc, Or<And<Entity<entity_preprocessing_operator>>, And<Entity<entity_operator_or_punctuator>>>);
ENTITY(entity_preprocessing_operator, Or<And<Terminal<R"raw(#)raw">>, And<Terminal<R"raw(##)raw">>, And<Terminal<R"raw(%:)raw">>, And<Terminal<R"raw(%:%:)raw">>>);
ENTITY(entity_operator_or_punctuator, Or<And<Terminal<R"raw({)raw">>, And<Terminal<R"raw(})raw">>, And<Terminal<R"raw([)raw">>, And<Terminal<R"raw(])raw">>, And<Terminal<R"raw(()raw">>, And<Terminal<R"raw())raw">>, And<Terminal<R"raw(<:)raw">>, And<Terminal<R"raw(:>)raw">>, And<Terminal<R"raw(<%)raw">>, And<Terminal<R"raw(%>)raw">>, And<Terminal<R"raw(;)raw">>, And<Terminal<R"raw(:)raw">>, And<Terminal<R"raw(...)raw">>, And<Terminal<R"raw(?)raw">>, And<Terminal<R"raw(::)raw">>, And<Terminal<R"raw(.)raw">>, And<Terminal<R"raw(.*)raw">>, And<Terminal<R"raw(->)raw">>, And<Terminal<R"raw(->*)raw">>, And<Terminal<R"raw(~)raw">>, And<Terminal<R"raw(!)raw">>, And<Terminal<R"raw(+)raw">>, And<Terminal<R"raw(-)raw">>, And<Terminal<R"raw(*)raw">>, And<Terminal<R"raw(/)raw">>, And<Terminal<R"raw(%)raw">>, And<Terminal<R"raw(^)raw">>, And<Terminal<R"raw(&)raw">>, And<Terminal<R"raw(|)raw">>, And<Terminal<R"raw(=)raw">>, And<Terminal<R"raw(+=)raw">>, And<Terminal<R"raw(-=)raw">>, And<Terminal<R"raw(*=)raw">>, And<Terminal<R"raw(/=)raw">>, And<Terminal<R"raw(%=)raw">>, And<Terminal<R"raw(^=)raw">>, And<Terminal<R"raw(&=)raw">>, And<Terminal<R"raw(|=)raw">>, And<Terminal<R"raw(==)raw">>, And<Terminal<R"raw(!=)raw">>, And<Terminal<R"raw(<)raw">>, And<Terminal<R"raw(>)raw">>, And<Terminal<R"raw(<=)raw">>, And<Terminal<R"raw(>=)raw">>, And<Terminal<R"raw(<=>)raw">>, And<Terminal<R"raw(&&)raw">>, And<Terminal<R"raw(||)raw">>, And<Terminal<R"raw(<<)raw">>, And<Terminal<R"raw(>>)raw">>, And<Terminal<R"raw(<<=)raw">>, And<Terminal<R"raw(>>=)raw">>, And<Terminal<R"raw(++)raw">>, And<Terminal<R"raw(--)raw">>, And<Terminal<R"raw(,)raw">>, And<Keyword<R"raw(and)raw">>, And<Keyword<R"raw(or)raw">>, And<Keyword<R"raw(xor)raw">>, And<Keyword<R"raw(not)raw">>, And<Keyword<R"raw(bitand)raw">>, And<Keyword<R"raw(bitor)raw">>, And<Keyword<R"raw(compl)raw">>, And<Keyword<R"raw(and_eq)raw">>, And<Keyword<R"raw(or_eq)raw">>, And<Keyword<R"raw(xor_eq)raw">>, And<Keyword<R"raw(not_eq)raw">>>);
ENTITY(entity_token, Or<And<Entity<entity_identifier>>, And<Entity<entity_keyword>>, And<Entity<entity_literal>>, And<Entity<entity_operator_or_punctuator>>>);
ENTITY(entity_identifier, And<Entity<entity_identifier_impl_start>, List<Entity<entity_identifier_impl_continue>, 0>>);
ENTITY(entity_identifier_impl_start, Or<And<Entity<entity_identifier_start>>>);
ENTITY(entity_identifier_impl_continue, Or<And<Entity<entity_identifier_continue>>>);
ENTITY(entity_identifier_start, Or<And<Entity<entity_nondigit>>, And<UnimplementedTODO<> /* textnormal{ 'an' 'element' 'of' 'the' 'translation' 'character' 'set' 'with' 'the' 'Unicode' 'property' 'XID_Start' } */>>);
ENTITY(entity_identifier_continue, Or<And<Entity<entity_digit>>, And<Entity<entity_nondigit>>, And<UnimplementedTODO<> /* textnormal{ 'an' 'element' 'of' 'the' 'translation' 'character' 'set' 'with' 'the' 'Unicode' 'property' 'XID_Continue' } */>>);
ENTITY(entity_nondigit, Or<And<Terminal<R"raw(a)raw">>, And<Terminal<R"raw(b)raw">>, And<Terminal<R"raw(c)raw">>, And<Terminal<R"raw(d)raw">>, And<Terminal<R"raw(e)raw">>, And<Terminal<R"raw(f)raw">>, And<Terminal<R"raw(g)raw">>, And<Terminal<R"raw(h)raw">>, And<Terminal<R"raw(i)raw">>, And<Terminal<R"raw(j)raw">>, And<Terminal<R"raw(k)raw">>, And<Terminal<R"raw(l)raw">>, And<Terminal<R"raw(m)raw">>, And<Terminal<R"raw(n)raw">>, And<Terminal<R"raw(o)raw">>, And<Terminal<R"raw(p)raw">>, And<Terminal<R"raw(q)raw">>, And<Terminal<R"raw(r)raw">>, And<Terminal<R"raw(s)raw">>, And<Terminal<R"raw(t)raw">>, And<Terminal<R"raw(u)raw">>, And<Terminal<R"raw(v)raw">>, And<Terminal<R"raw(w)raw">>, And<Terminal<R"raw(x)raw">>, And<Terminal<R"raw(y)raw">>, And<Terminal<R"raw(z)raw">>, And<Terminal<R"raw(A)raw">>, And<Terminal<R"raw(B)raw">>, And<Terminal<R"raw(C)raw">>, And<Terminal<R"raw(D)raw">>, And<Terminal<R"raw(E)raw">>, And<Terminal<R"raw(F)raw">>, And<Terminal<R"raw(G)raw">>, And<Terminal<R"raw(H)raw">>, And<Terminal<R"raw(I)raw">>, And<Terminal<R"raw(J)raw">>, And<Terminal<R"raw(K)raw">>, And<Terminal<R"raw(L)raw">>, And<Terminal<R"raw(M)raw">>, And<Terminal<R"raw(N)raw">>, And<Terminal<R"raw(O)raw">>, And<Terminal<R"raw(P)raw">>, And<Terminal<R"raw(Q)raw">>, And<Terminal<R"raw(R)raw">>, And<Terminal<R"raw(S)raw">>, And<Terminal<R"raw(T)raw">>, And<Terminal<R"raw(U)raw">>, And<Terminal<R"raw(V)raw">>, And<Terminal<R"raw(W)raw">>, And<Terminal<R"raw(X)raw">>, And<Terminal<R"raw(Y)raw">>, And<Terminal<R"raw(Z)raw">>, And<Terminal<R"raw(_)raw">>>);
ENTITY(entity_digit, Or<And<Terminal<R"raw(0)raw">>, And<Terminal<R"raw(1)raw">>, And<Terminal<R"raw(2)raw">>, And<Terminal<R"raw(3)raw">>, And<Terminal<R"raw(4)raw">>, And<Terminal<R"raw(5)raw">>, And<Terminal<R"raw(6)raw">>, And<Terminal<R"raw(7)raw">>, And<Terminal<R"raw(8)raw">>, And<Terminal<R"raw(9)raw">>>);
ENTITY(entity_keyword, Or<And<UnimplementedTODO<> /* textnormal{ 'any' 'identifier' 'listed' 'in' tref{ 'lex.key' } } */>, And<UnimplementedTODO<> /* grammarterm{ 'import-keyword' } */>, And<UnimplementedTODO<> /* grammarterm{ 'module-keyword' } */>, And<UnimplementedTODO<> /* grammarterm{ 'export-keyword' } */>>);
ENTITY(entity_literal, Or<And<Entity<entity_integer_literal>>, And<Entity<entity_character_literal>>, And<Entity<entity_floating_point_literal>>, And<Entity<entity_string_literal>>, And<Entity<entity_boolean_literal>>, And<Entity<entity_pointer_literal>>, And<Entity<entity_user_defined_literal>>>);
ENTITY(entity_integer_literal, Or<And<Entity<entity_binary_literal>, Opt<Entity<entity_integer_suffix>>>, And<Entity<entity_octal_literal>, Opt<Entity<entity_integer_suffix>>>, And<Entity<entity_decimal_literal>, Opt<Entity<entity_integer_suffix>>>, And<Entity<entity_hexadecimal_literal>, Opt<Entity<entity_integer_suffix>>>>);
ENTITY(entity_binary_literal, And<Entity<entity_binary_literal_impl_start>, List<Entity<entity_binary_literal_impl_continue>, 0>>);
ENTITY(entity_binary_literal_impl_start, Or<And<Terminal<R"raw(0b)raw">, Entity<entity_binary_digit>>, And<Terminal<R"raw(0B)raw">, Entity<entity_binary_digit>>>);
ENTITY(entity_binary_literal_impl_continue, Or<And<Opt<Terminal<R"raw(')raw">>, Entity<entity_binary_digit>>>);
ENTITY(entity_octal_literal, And<Entity<entity_octal_literal_impl_start>, List<Entity<entity_octal_literal_impl_continue>, 0>>);
ENTITY(entity_octal_literal_impl_start, Or<And<Terminal<R"raw(0)raw">>>);
ENTITY(entity_octal_literal_impl_continue, Or<And<Opt<Terminal<R"raw(')raw">>, Entity<entity_octal_digit>>>);
ENTITY(entity_decimal_literal, And<Entity<entity_decimal_literal_impl_start>, List<Entity<entity_decimal_literal_impl_continue>, 0>>);
ENTITY(entity_decimal_literal_impl_start, Or<And<Entity<entity_nonzero_digit>>>);
ENTITY(entity_decimal_literal_impl_continue, Or<And<Opt<Terminal<R"raw(')raw">>, Entity<entity_digit>>>);
ENTITY(entity_hexadecimal_literal, Or<And<Entity<entity_hexadecimal_prefix>, Entity<entity_hexadecimal_digit_sequence>>>);
ENTITY(entity_binary_digit, Or<And<Terminal<R"raw(0)raw">>, And<Terminal<R"raw(1)raw">>>);
ENTITY(entity_octal_digit, Or<And<Terminal<R"raw(0)raw">>, And<Terminal<R"raw(1)raw">>, And<Terminal<R"raw(2)raw">>, And<Terminal<R"raw(3)raw">>, And<Terminal<R"raw(4)raw">>, And<Terminal<R"raw(5)raw">>, And<Terminal<R"raw(6)raw">>, And<Terminal<R"raw(7)raw">>>);
ENTITY(entity_nonzero_digit, Or<And<Terminal<R"raw(1)raw">>, And<Terminal<R"raw(2)raw">>, And<Terminal<R"raw(3)raw">>, And<Terminal<R"raw(4)raw">>, And<Terminal<R"raw(5)raw">>, And<Terminal<R"raw(6)raw">>, And<Terminal<R"raw(7)raw">>, And<Terminal<R"raw(8)raw">>, And<Terminal<R"raw(9)raw">>>);
ENTITY(entity_hexadecimal_prefix, Or<And<Terminal<R"raw(0x)raw">>, And<Terminal<R"raw(0X)raw">>>);
ENTITY(entity_hexadecimal_digit_sequence, And<Entity<entity_hexadecimal_digit_sequence_impl_start>, List<Entity<entity_hexadecimal_digit_sequence_impl_continue>, 0>>);
ENTITY(entity_hexadecimal_digit_sequence_impl_start, Or<And<Entity<entity_hexadecimal_digit>>>);
ENTITY(entity_hexadecimal_digit_sequence_impl_continue, Or<And<Opt<Terminal<R"raw(')raw">>, Entity<entity_hexadecimal_digit>>>);
ENTITY(entity_hexadecimal_digit, Or<And<Terminal<R"raw(0)raw">>, And<Terminal<R"raw(1)raw">>, And<Terminal<R"raw(2)raw">>, And<Terminal<R"raw(3)raw">>, And<Terminal<R"raw(4)raw">>, And<Terminal<R"raw(5)raw">>, And<Terminal<R"raw(6)raw">>, And<Terminal<R"raw(7)raw">>, And<Terminal<R"raw(8)raw">>, And<Terminal<R"raw(9)raw">>, And<Terminal<R"raw(a)raw">>, And<Terminal<R"raw(b)raw">>, And<Terminal<R"raw(c)raw">>, And<Terminal<R"raw(d)raw">>, And<Terminal<R"raw(e)raw">>, And<Terminal<R"raw(f)raw">>, And<Terminal<R"raw(A)raw">>, And<Terminal<R"raw(B)raw">>, And<Terminal<R"raw(C)raw">>, And<Terminal<R"raw(D)raw">>, And<Terminal<R"raw(E)raw">>, And<Terminal<R"raw(F)raw">>>);
ENTITY(entity_integer_suffix, Or<And<Entity<entity_unsigned_suffix>, Opt<Entity<entity_long_suffix>>>, And<Entity<entity_unsigned_suffix>, Opt<Entity<entity_long_long_suffix>>>, And<Entity<entity_unsigned_suffix>, Opt<Entity<entity_size_suffix>>>, And<Entity<entity_long_suffix>, Opt<Entity<entity_unsigned_suffix>>>, And<Entity<entity_long_long_suffix>, Opt<Entity<entity_unsigned_suffix>>>, And<Entity<entity_size_suffix>, Opt<Entity<entity_unsigned_suffix>>>>);
ENTITY(entity_unsigned_suffix, Or<And<Terminal<R"raw(u)raw">>, And<Terminal<R"raw(U)raw">>>);
ENTITY(entity_long_suffix, Or<And<Terminal<R"raw(l)raw">>, And<Terminal<R"raw(L)raw">>>);
ENTITY(entity_long_long_suffix, Or<And<Terminal<R"raw(ll)raw">>, And<Terminal<R"raw(LL)raw">>>);
ENTITY(entity_size_suffix, Or<And<Terminal<R"raw(z)raw">>, And<Terminal<R"raw(Z)raw">>>);
ENTITY(entity_character_literal, Or<And<Opt<Entity<entity_encoding_prefix>>, Terminal<R"raw(')raw">, Entity<entity_c_char_sequence>, Terminal<R"raw(')raw">>>);
ENTITY(entity_encoding_prefix, Or<And<Terminal<R"raw(u8)raw">>, And<Terminal<R"raw(u)raw">>, And<Terminal<R"raw(U)raw">>, And<Terminal<R"raw(L)raw">>>);
ENTITY(entity_c_char_sequence, List<Entity<entity_c_char>>);
ENTITY(entity_c_char, Or<And<Entity<entity_basic_c_char>>, And<Entity<entity_escape_sequence>>, And<Entity<entity_universal_character_name>>>);
ENTITY(entity_basic_c_char, Or<And<UnimplementedTODO<> /* textnormal{ 'any' 'member' 'of' 'the' 'translation' 'character' 'set' 'except' 'the' unicode{ '0027' } ',' } */>, And<UnimplementedTODO<> /* textnormal{ unicode{ '005c' } ',' 'or' 'new-line' 'character' } */>>);
ENTITY(entity_escape_sequence, Or<And<Entity<entity_simple_escape_sequence>>, And<Entity<entity_numeric_escape_sequence>>, And<Entity<entity_conditional_escape_sequence>>>);
ENTITY(entity_simple_escape_sequence, Or<And<Terminal<R"raw(\)raw">, Entity<entity_simple_escape_sequence_char>>>);
ENTITY(entity_simple_escape_sequence_char, Or<And<Terminal<R"raw(')raw">>, And<Terminal<R"raw(")raw">>, And<Terminal<R"raw(?)raw">>, And<Terminal<R"raw(\)raw">>, And<Terminal<R"raw(a)raw">>, And<Terminal<R"raw(b)raw">>, And<Terminal<R"raw(f)raw">>, And<Terminal<R"raw(n)raw">>, And<Terminal<R"raw(r)raw">>, And<Terminal<R"raw(t)raw">>, And<Terminal<R"raw(v)raw">>>);
ENTITY(entity_numeric_escape_sequence, Or<And<Entity<entity_octal_escape_sequence>>, And<Entity<entity_hexadecimal_escape_sequence>>>);
ENTITY(entity_simple_octal_digit_sequence, List<Entity<entity_octal_digit>>);
ENTITY(entity_octal_escape_sequence, Or<And<Terminal<R"raw(\)raw">, Entity<entity_octal_digit>>, And<Terminal<R"raw(\)raw">, Entity<entity_octal_digit>, Entity<entity_octal_digit>>, And<Terminal<R"raw(\)raw">, Entity<entity_octal_digit>, Entity<entity_octal_digit>, Entity<entity_octal_digit>>, And<Terminal<R"raw(\)raw">, Terminal<R"raw(o{)raw">, Entity<entity_simple_octal_digit_sequence>, Terminal<R"raw(})raw">>>);
ENTITY(entity_hexadecimal_escape_sequence, Or<And<Terminal<R"raw(\)raw">, Terminal<R"raw(x)raw">, Entity<entity_simple_hexadecimal_digit_sequence>>, And<Terminal<R"raw(\)raw">, Terminal<R"raw(x{)raw">, Entity<entity_simple_hexadecimal_digit_sequence>, Terminal<R"raw(})raw">>>);
ENTITY(entity_conditional_escape_sequence, Or<And<Terminal<R"raw(\)raw">, Entity<entity_conditional_escape_sequence_char>>>);
ENTITY(entity_conditional_escape_sequence_char, Or<And<UnimplementedTODO<> /* textnormal{ 'any' 'member' 'of' 'the' 'basic' 'character' 'set' 'that' 'is' 'not' 'an' } */, Entity<entity_octal_digit>, UnimplementedTODO<> /* textnormal{ ',' 'a' } */, Entity<entity_simple_escape_sequence_char>, UnimplementedTODO<> /* textnormal{ ',' 'or' 'the' 'characters' terminal{ 'N' } ',' terminal{ 'o' } ',' terminal{ 'u' } ',' terminal{ 'U' } ',' 'or' terminal{ 'x' } } */>>);
ENTITY(entity_floating_point_literal, Or<And<Entity<entity_decimal_floating_point_literal>>, And<Entity<entity_hexadecimal_floating_point_literal>>>);
ENTITY(entity_decimal_floating_point_literal, Or<And<Entity<entity_fractional_constant>, Opt<Entity<entity_exponent_part>>, Opt<Entity<entity_floating_point_suffix>>>, And<Entity<entity_digit_sequence>, Entity<entity_exponent_part>, Opt<Entity<entity_floating_point_suffix>>>>);
ENTITY(entity_hexadecimal_floating_point_literal, Or<And<Entity<entity_hexadecimal_prefix>, Entity<entity_hexadecimal_fractional_constant>, Entity<entity_binary_exponent_part>, Opt<Entity<entity_floating_point_suffix>>>, And<Entity<entity_hexadecimal_prefix>, Entity<entity_hexadecimal_digit_sequence>, Entity<entity_binary_exponent_part>, Opt<Entity<entity_floating_point_suffix>>>>);
ENTITY(entity_fractional_constant, Or<And<Opt<Entity<entity_digit_sequence>>, Terminal<R"raw(.)raw">, Entity<entity_digit_sequence>>, And<Entity<entity_digit_sequence>, Terminal<R"raw(.)raw">>>);
ENTITY(entity_hexadecimal_fractional_constant, Or<And<Opt<Entity<entity_hexadecimal_digit_sequence>>, Terminal<R"raw(.)raw">, Entity<entity_hexadecimal_digit_sequence>>, And<Entity<entity_hexadecimal_digit_sequence>, Terminal<R"raw(.)raw">>>);
ENTITY(entity_exponent_part, Or<And<Terminal<R"raw(e)raw">, Opt<Entity<entity_sign>>, Entity<entity_digit_sequence>>, And<Terminal<R"raw(E)raw">, Opt<Entity<entity_sign>>, Entity<entity_digit_sequence>>>);
ENTITY(entity_binary_exponent_part, Or<And<Terminal<R"raw(p)raw">, Opt<Entity<entity_sign>>, Entity<entity_digit_sequence>>, And<Terminal<R"raw(P)raw">, Opt<Entity<entity_sign>>, Entity<entity_digit_sequence>>>);
ENTITY(entity_sign, Or<And<Terminal<R"raw(+)raw">>, And<Terminal<R"raw(-)raw">>>);
ENTITY(entity_digit_sequence, And<Entity<entity_digit_sequence_impl_start>, List<Entity<entity_digit_sequence_impl_continue>, 0>>);
ENTITY(entity_digit_sequence_impl_start, Or<And<Entity<entity_digit>>>);
ENTITY(entity_digit_sequence_impl_continue, Or<And<Opt<Terminal<R"raw(')raw">>, Entity<entity_digit>>>);
ENTITY(entity_floating_point_suffix, Or<And<Terminal<R"raw(f)raw">>, And<Terminal<R"raw(l)raw">>, And<Terminal<R"raw(f16)raw">>, And<Terminal<R"raw(f32)raw">>, And<Terminal<R"raw(f64)raw">>, And<Terminal<R"raw(f128)raw">>, And<Terminal<R"raw(bf16)raw">>, And<Terminal<R"raw(F)raw">>, And<Terminal<R"raw(L)raw">>, And<Terminal<R"raw(F16)raw">>, And<Terminal<R"raw(F32)raw">>, And<Terminal<R"raw(F64)raw">>, And<Terminal<R"raw(F128)raw">>, And<Terminal<R"raw(BF16)raw">>>);
ENTITY(entity_string_literal, Or<And<Opt<Entity<entity_encoding_prefix>>, Terminal<R"raw(")raw">, Opt<Entity<entity_s_char_sequence>>, Terminal<R"raw(")raw">>, And<Opt<Entity<entity_encoding_prefix>>, Terminal<R"raw(R)raw">, Entity<entity_raw_string>>>);
ENTITY(entity_s_char_sequence, List<Entity<entity_s_char>>);
ENTITY(entity_s_char, Or<And<Entity<entity_basic_s_char>>, And<Entity<entity_escape_sequence>>, And<Entity<entity_universal_character_name>>>);
ENTITY(entity_basic_s_char, Or<And<UnimplementedTODO<> /* textnormal{ 'any' 'member' 'of' 'the' 'translation' 'character' 'set' 'except' 'the' unicode{ '0022' } ',' } */>, And<UnimplementedTODO<> /* textnormal{ unicode{ '005c' } ',' 'or' 'new-line' 'character' } */>>);
ENTITY(entity_raw_string, Or<And<Terminal<R"raw(")raw">, Opt<Entity<entity_d_char_sequence>>, Terminal<R"raw(()raw">, Opt<Entity<entity_r_char_sequence>>, Terminal<R"raw())raw">, Opt<Entity<entity_d_char_sequence>>, Terminal<R"raw(")raw">>>);
ENTITY(entity_r_char_sequence, List<Entity<entity_r_char>>);
ENTITY(entity_r_char, Or<And<UnimplementedTODO<> /* textnormal{ 'any' 'member' 'of' 'the' 'translation' 'character' 'set,' 'except' 'a' unicode{ '0029' } 'followed' 'by' } */>, And<UnimplementedTODO<> /* textnormal{ 'the' 'initial' grammarterm{ 'd-char-sequence' } '(which' 'may' 'be' 'empty)' 'followed' 'by' 'a' unicode{ '0022' } } */>>);
ENTITY(entity_d_char_sequence, List<Entity<entity_d_char>>);
ENTITY(entity_d_char, Or<And<UnimplementedTODO<> /* textnormal{ 'any' 'member' 'of' 'the' 'basic' 'character' 'set' 'except:' } */>, And<UnimplementedTODO<> /* textnormal{ unicode{ '0020' } ',' unicode{ '0028' } ',' unicode{ '0029' } ',' unicode{ '005c' } ',' } */>, And<UnimplementedTODO<> /* textnormal{ unicode{ '0009' } ',' unicode{ '000b' } ',' unicode{ '000c' } ',' 'and' 'new-line' } */>>);
ENTITY(entity_unevaluated_string, Or<And<Entity<entity_string_literal>>>);
ENTITY(entity_boolean_literal, Or<And<Terminal<R"raw(false)raw">>, And<Terminal<R"raw(true)raw">>>);
ENTITY(entity_pointer_literal, Or<And<Terminal<R"raw(nullptr)raw">>>);
ENTITY(entity_user_defined_literal, Or<And<Entity<entity_user_defined_integer_literal>>, And<Entity<entity_user_defined_floating_point_literal>>, And<Entity<entity_user_defined_string_literal>>, And<Entity<entity_user_defined_character_literal>>>);
ENTITY(entity_user_defined_integer_literal, Or<And<Entity<entity_decimal_literal>, Entity<entity_ud_suffix>>, And<Entity<entity_octal_literal>, Entity<entity_ud_suffix>>, And<Entity<entity_hexadecimal_literal>, Entity<entity_ud_suffix>>, And<Entity<entity_binary_literal>, Entity<entity_ud_suffix>>>);
ENTITY(entity_user_defined_floating_point_literal, Or<And<Entity<entity_fractional_constant>, Opt<Entity<entity_exponent_part>>, Entity<entity_ud_suffix>>, And<Entity<entity_digit_sequence>, Entity<entity_exponent_part>, Entity<entity_ud_suffix>>, And<Entity<entity_hexadecimal_prefix>, Entity<entity_hexadecimal_fractional_constant>, Entity<entity_binary_exponent_part>, Entity<entity_ud_suffix>>, And<Entity<entity_hexadecimal_prefix>, Entity<entity_hexadecimal_digit_sequence>, Entity<entity_binary_exponent_part>, Entity<entity_ud_suffix>>>);
ENTITY(entity_user_defined_string_literal, Or<And<Entity<entity_string_literal>, Entity<entity_ud_suffix>>>);
ENTITY(entity_user_defined_character_literal, Or<And<Entity<entity_character_literal>, Entity<entity_ud_suffix>>>);
ENTITY(entity_ud_suffix, Or<And<Entity<entity_identifier>>>);
ENTITY(entity_translation_unit, Or<And<Opt<Entity<entity_declaration_seq>>>, And<Opt<Entity<entity_global_module_fragment>>, Entity<entity_module_declaration>, Opt<Entity<entity_declaration_seq>>, Opt<Entity<entity_private_module_fragment>>>>);
ENTITY(entity_primary_expression, Or<And<Entity<entity_literal>>, And<Keyword<R"raw(this)raw">>, And<Terminal<R"raw(()raw">, Entity<entity_expression>, Terminal<R"raw())raw">>, And<Entity<entity_id_expression>>, And<Entity<entity_lambda_expression>>, And<Entity<entity_fold_expression>>, And<Entity<entity_requires_expression>>>);
ENTITY(entity_id_expression, Or<And<Entity<entity_unqualified_id>>, And<Entity<entity_qualified_id>>, And<Entity<entity_pack_index_expression>>>);
ENTITY(entity_unqualified_id, Or<And<Entity<entity_identifier>>, And<Entity<entity_operator_function_id>>, And<Entity<entity_conversion_function_id>>, And<Entity<entity_literal_operator_id>>, And<Terminal<R"raw(~)raw">, Entity<entity_type_name>>, And<Terminal<R"raw(~)raw">, Entity<entity_computed_type_specifier>>, And<Entity<entity_template_id>>>);
ENTITY(entity_qualified_id, Or<And<Entity<entity_nested_name_specifier>, Opt<Keyword<R"raw(template)raw">>, Entity<entity_unqualified_id>>>);
ENTITY(entity_nested_name_specifier, And<Entity<entity_nested_name_specifier_impl_start>, List<Entity<entity_nested_name_specifier_impl_continue>, 0>>);
ENTITY(entity_nested_name_specifier_impl_start, Or<And<Terminal<R"raw(::)raw">>, And<Entity<entity_type_name>, Terminal<R"raw(::)raw">>, And<Entity<entity_namespace_name>, Terminal<R"raw(::)raw">>, And<Entity<entity_computed_type_specifier>, Terminal<R"raw(::)raw">>>);
ENTITY(entity_nested_name_specifier_impl_continue, Or<And<Entity<entity_identifier>, Terminal<R"raw(::)raw">>, And<Opt<Keyword<R"raw(template)raw">>, Entity<entity_simple_template_id>, Terminal<R"raw(::)raw">>>);
ENTITY(entity_pack_index_expression, Or<And<Entity<entity_id_expression>, Terminal<R"raw(...)raw">, Terminal<R"raw([)raw">, Entity<entity_constant_expression>, Terminal<R"raw(])raw">>>);
ENTITY(entity_lambda_expression, Or<And<Entity<entity_lambda_introducer>, Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_lambda_declarator>, Entity<entity_compound_statement>>, And<Entity<entity_lambda_introducer>, Terminal<R"raw(<)raw">, Entity<entity_template_parameter_list>, Terminal<R"raw(>)raw">, Opt<Entity<entity_requires_clause>>, Opt<Entity<entity_attribute_specifier_seq>>>, And<Entity<entity_lambda_declarator>, Entity<entity_compound_statement>>>);
ENTITY(entity_lambda_introducer, Or<And<Terminal<R"raw([)raw">, Opt<Entity<entity_lambda_capture>>, Terminal<R"raw(])raw">>>);
ENTITY(entity_lambda_declarator, Or<And<Entity<entity_lambda_specifier_seq>, Opt<Entity<entity_noexcept_specifier>>, Opt<Entity<entity_attribute_specifier_seq>>, Opt<Entity<entity_trailing_return_type>>>, And<Entity<entity_noexcept_specifier>, Opt<Entity<entity_attribute_specifier_seq>>, Opt<Entity<entity_trailing_return_type>>>, And<Opt<Entity<entity_trailing_return_type>>>, And<Terminal<R"raw(()raw">, Entity<entity_parameter_declaration_clause>, Terminal<R"raw())raw">, Opt<Entity<entity_lambda_specifier_seq>>, Opt<Entity<entity_noexcept_specifier>>, Opt<Entity<entity_attribute_specifier_seq>>>, And<Opt<Entity<entity_trailing_return_type>>, Opt<Entity<entity_requires_clause>>>>);
ENTITY(entity_lambda_specifier, Or<And<Keyword<R"raw(consteval)raw">>, And<Keyword<R"raw(constexpr)raw">>, And<Keyword<R"raw(mutable)raw">>, And<Keyword<R"raw(static)raw">>>);
ENTITY(entity_lambda_specifier_seq, List<Entity<entity_lambda_specifier>>);
ENTITY(entity_lambda_capture, Or<And<Entity<entity_capture_default>>, And<Entity<entity_capture_list>>, And<Entity<entity_capture_default>, Terminal<R"raw(,)raw">, Entity<entity_capture_list>>>);
ENTITY(entity_capture_default, Or<And<Terminal<R"raw(&)raw">>, And<Terminal<R"raw(=)raw">>>);
ENTITY(entity_capture_list, And<Entity<entity_capture_list_impl_start>, List<Entity<entity_capture_list_impl_continue>, 0>>);
ENTITY(entity_capture_list_impl_start, Or<And<Entity<entity_capture>>>);
ENTITY(entity_capture_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_capture>>>);
ENTITY(entity_capture, Or<And<Entity<entity_simple_capture>>, And<Entity<entity_init_capture>>>);
ENTITY(entity_simple_capture, Or<And<Entity<entity_identifier>, Opt<Terminal<R"raw(...)raw">>>, And<Terminal<R"raw(&)raw">, Entity<entity_identifier>, Opt<Terminal<R"raw(...)raw">>>, And<Keyword<R"raw(this)raw">>, And<Terminal<R"raw(*)raw">, Terminal<R"raw(this)raw">>>);
ENTITY(entity_init_capture, Or<And<Opt<Terminal<R"raw(...)raw">>, Entity<entity_identifier>, Entity<entity_initializer>>, And<Terminal<R"raw(&)raw">, Opt<Terminal<R"raw(...)raw">>, Entity<entity_identifier>, Entity<entity_initializer>>>);
ENTITY(entity_fold_expression, Or<And<Terminal<R"raw(()raw">, Entity<entity_cast_expression>, Entity<entity_fold_operator>, Terminal<R"raw(...)raw">, Terminal<R"raw())raw">>, And<Terminal<R"raw(()raw">, Terminal<R"raw(...)raw">, Entity<entity_fold_operator>, Entity<entity_cast_expression>, Terminal<R"raw())raw">>, And<Terminal<R"raw(()raw">, Entity<entity_cast_expression>, Entity<entity_fold_operator>, Terminal<R"raw(...)raw">, Entity<entity_fold_operator>, Entity<entity_cast_expression>, Terminal<R"raw())raw">>>);
ENTITY(entity_fold_operator, Or<And<Terminal<R"raw(+)raw">>, And<Terminal<R"raw(-)raw">>, And<Terminal<R"raw(*)raw">>, And<Terminal<R"raw(/)raw">>, And<Terminal<R"raw(%)raw">>, And<Terminal<R"raw(^)raw">>, And<Terminal<R"raw(&)raw">>, And<Terminal<R"raw(|)raw">>, And<Terminal<R"raw(<<)raw">>, And<Terminal<R"raw(>>)raw">>, And<Terminal<R"raw(+=)raw">>, And<Terminal<R"raw(-=)raw">>, And<Terminal<R"raw(*=)raw">>, And<Terminal<R"raw(/=)raw">>, And<Terminal<R"raw(%=)raw">>, And<Terminal<R"raw(^=)raw">>, And<Terminal<R"raw(&=)raw">>, And<Terminal<R"raw(|=)raw">>, And<Terminal<R"raw(<<=)raw">>, And<Terminal<R"raw(>>=)raw">>, And<Terminal<R"raw(=)raw">>, And<Terminal<R"raw(==)raw">>, And<Terminal<R"raw(!=)raw">>, And<Terminal<R"raw(<)raw">>, And<Terminal<R"raw(>)raw">>, And<Terminal<R"raw(<=)raw">>, And<Terminal<R"raw(>=)raw">>, And<Terminal<R"raw(&&)raw">>, And<Terminal<R"raw(||)raw">>, And<Terminal<R"raw(,)raw">>, And<Terminal<R"raw(.*)raw">>, And<Terminal<R"raw(->*)raw">>>);
ENTITY(entity_requires_expression, Or<And<Keyword<R"raw(requires)raw">, Opt<Entity<entity_requirement_parameter_list>>, Entity<entity_requirement_body>>>);
ENTITY(entity_requirement_parameter_list, Or<And<Terminal<R"raw(()raw">, Entity<entity_parameter_declaration_clause>, Terminal<R"raw())raw">>>);
ENTITY(entity_requirement_body, Or<And<Terminal<R"raw({)raw">, Entity<entity_requirement_seq>, Terminal<R"raw(})raw">>>);
ENTITY(entity_requirement_seq, List<Entity<entity_requirement>>);
ENTITY(entity_requirement, Or<And<Entity<entity_simple_requirement>>, And<Entity<entity_type_requirement>>, And<Entity<entity_compound_requirement>>, And<Entity<entity_nested_requirement>>>);
ENTITY(entity_simple_requirement, Or<And<Entity<entity_expression>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_type_requirement, Or<And<Keyword<R"raw(typename)raw">, Opt<Entity<entity_nested_name_specifier>>, Entity<entity_type_name>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_compound_requirement, Or<And<Terminal<R"raw({)raw">, Entity<entity_expression>, Terminal<R"raw(})raw">, Opt<Keyword<R"raw(noexcept)raw">>, Opt<Entity<entity_return_type_requirement>>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_return_type_requirement, Or<And<Terminal<R"raw(->)raw">, Entity<entity_type_constraint>>>);
ENTITY(entity_nested_requirement, Or<And<Keyword<R"raw(requires)raw">, Entity<entity_constraint_expression>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_postfix_expression, And<Entity<entity_postfix_expression_impl_start>, List<Entity<entity_postfix_expression_impl_continue>, 0>>);
ENTITY(entity_postfix_expression_impl_start, Or<And<Entity<entity_primary_expression>>, And<Entity<entity_simple_type_specifier>, Terminal<R"raw(()raw">, Opt<Entity<entity_expression_list>>, Terminal<R"raw())raw">>, And<Entity<entity_typename_specifier>, Terminal<R"raw(()raw">, Opt<Entity<entity_expression_list>>, Terminal<R"raw())raw">>, And<Entity<entity_simple_type_specifier>, Entity<entity_braced_init_list>>, And<Entity<entity_typename_specifier>, Entity<entity_braced_init_list>>, And<Keyword<R"raw(dynamic_cast)raw">, Terminal<R"raw(<)raw">, Entity<entity_type_id>, Terminal<R"raw(>)raw">, Terminal<R"raw(()raw">, Entity<entity_expression>, Terminal<R"raw())raw">>, And<Keyword<R"raw(static_cast)raw">, Terminal<R"raw(<)raw">, Entity<entity_type_id>, Terminal<R"raw(>)raw">, Terminal<R"raw(()raw">, Entity<entity_expression>, Terminal<R"raw())raw">>, And<Keyword<R"raw(reinterpret_cast)raw">, Terminal<R"raw(<)raw">, Entity<entity_type_id>, Terminal<R"raw(>)raw">, Terminal<R"raw(()raw">, Entity<entity_expression>, Terminal<R"raw())raw">>, And<Keyword<R"raw(const_cast)raw">, Terminal<R"raw(<)raw">, Entity<entity_type_id>, Terminal<R"raw(>)raw">, Terminal<R"raw(()raw">, Entity<entity_expression>, Terminal<R"raw())raw">>, And<Keyword<R"raw(typeid)raw">, Terminal<R"raw(()raw">, Entity<entity_expression>, Terminal<R"raw())raw">>, And<Keyword<R"raw(typeid)raw">, Terminal<R"raw(()raw">, Entity<entity_type_id>, Terminal<R"raw())raw">>>);
ENTITY(entity_postfix_expression_impl_continue, Or<And<Terminal<R"raw([)raw">, Opt<Entity<entity_expression_list>>, Terminal<R"raw(])raw">>, And<Terminal<R"raw(()raw">, Opt<Entity<entity_expression_list>>, Terminal<R"raw())raw">>, And<Terminal<R"raw(.)raw">, Opt<Terminal<R"raw(template)raw">>, Entity<entity_id_expression>>, And<Terminal<R"raw(->)raw">, Opt<Terminal<R"raw(template)raw">>, Entity<entity_id_expression>>, And<Terminal<R"raw(++)raw">>, And<Terminal<R"raw(--)raw">>>);
ENTITY(entity_expression_list, Or<And<Entity<entity_initializer_list>>>);
ENTITY(entity_unary_expression, Or<And<Entity<entity_postfix_expression>>, And<Entity<entity_unary_operator>, Entity<entity_cast_expression>>, And<Terminal<R"raw(++)raw">, Entity<entity_cast_expression>>, And<Terminal<R"raw(--)raw">, Entity<entity_cast_expression>>, And<Entity<entity_await_expression>>, And<Keyword<R"raw(sizeof)raw">, Entity<entity_unary_expression>>, And<Keyword<R"raw(sizeof)raw">, Terminal<R"raw(()raw">, Entity<entity_type_id>, Terminal<R"raw())raw">>, And<Keyword<R"raw(sizeof)raw">, Terminal<R"raw(...)raw">, Terminal<R"raw(()raw">, Entity<entity_identifier>, Terminal<R"raw())raw">>, And<Keyword<R"raw(alignof)raw">, Terminal<R"raw(()raw">, Entity<entity_type_id>, Terminal<R"raw())raw">>, And<Entity<entity_noexcept_expression>>, And<Entity<entity_new_expression>>, And<Entity<entity_delete_expression>>>);
ENTITY(entity_unary_operator, Or<And<Terminal<R"raw(*)raw">>, And<Terminal<R"raw(&)raw">>, And<Terminal<R"raw(+)raw">>, And<Terminal<R"raw(-)raw">>, And<Terminal<R"raw(!)raw">>, And<Terminal<R"raw(~)raw">>>);
ENTITY(entity_await_expression, Or<And<Terminal<R"raw(co_await)raw">, Entity<entity_cast_expression>>>);
ENTITY(entity_noexcept_expression, Or<And<Keyword<R"raw(noexcept)raw">, Terminal<R"raw(()raw">, Entity<entity_expression>, Terminal<R"raw())raw">>>);
ENTITY(entity_new_expression, Or<And<Opt<Terminal<R"raw(::)raw">>, Keyword<R"raw(new)raw">, Opt<Entity<entity_new_placement>>, Entity<entity_new_type_id>, Opt<Entity<entity_new_initializer>>>, And<Opt<Terminal<R"raw(::)raw">>, Keyword<R"raw(new)raw">, Opt<Entity<entity_new_placement>>, Terminal<R"raw(()raw">, Entity<entity_type_id>, Terminal<R"raw())raw">, Opt<Entity<entity_new_initializer>>>>);
ENTITY(entity_new_placement, Or<And<Terminal<R"raw(()raw">, Entity<entity_expression_list>, Terminal<R"raw())raw">>>);
ENTITY(entity_new_type_id, Or<And<Entity<entity_type_specifier_seq>, Opt<Entity<entity_new_declarator>>>>);
ENTITY(entity_new_declarator, Or<And<Entity<entity_ptr_operator>, Opt<Entity<entity_new_declarator>>>, And<Entity<entity_noptr_new_declarator>>>);
ENTITY(entity_noptr_new_declarator, And<Entity<entity_noptr_new_declarator_impl_start>, List<Entity<entity_noptr_new_declarator_impl_continue>, 0>>);
ENTITY(entity_noptr_new_declarator_impl_start, Or<And<Terminal<R"raw([)raw">, Opt<Entity<entity_expression>>, Terminal<R"raw(])raw">, Opt<Entity<entity_attribute_specifier_seq>>>>);
ENTITY(entity_noptr_new_declarator_impl_continue, Or<And<Terminal<R"raw([)raw">, Entity<entity_constant_expression>, Terminal<R"raw(])raw">, Opt<Entity<entity_attribute_specifier_seq>>>>);
ENTITY(entity_new_initializer, Or<And<Terminal<R"raw(()raw">, Opt<Entity<entity_expression_list>>, Terminal<R"raw())raw">>, And<Entity<entity_braced_init_list>>>);
ENTITY(entity_delete_expression, Or<And<Opt<Terminal<R"raw(::)raw">>, Keyword<R"raw(delete)raw">, Entity<entity_cast_expression>>, And<Opt<Terminal<R"raw(::)raw">>, Keyword<R"raw(delete)raw">, Terminal<R"raw([)raw">, Terminal<R"raw(])raw">, Entity<entity_cast_expression>>>);
ENTITY(entity_cast_expression, Or<And<Entity<entity_unary_expression>>, And<Terminal<R"raw(()raw">, Entity<entity_type_id>, Terminal<R"raw())raw">, Entity<entity_cast_expression>>>);
ENTITY(entity_pm_expression, And<Entity<entity_pm_expression_impl_start>, List<Entity<entity_pm_expression_impl_continue>, 0>>);
ENTITY(entity_pm_expression_impl_start, Or<And<Entity<entity_cast_expression>>>);
ENTITY(entity_pm_expression_impl_continue, Or<And<Terminal<R"raw(.*)raw">, Entity<entity_cast_expression>>, And<Terminal<R"raw(->*)raw">, Entity<entity_cast_expression>>>);
ENTITY(entity_multiplicative_expression, And<Entity<entity_multiplicative_expression_impl_start>, List<Entity<entity_multiplicative_expression_impl_continue>, 0>>);
ENTITY(entity_multiplicative_expression_impl_start, Or<And<Entity<entity_pm_expression>>>);
ENTITY(entity_multiplicative_expression_impl_continue, Or<And<Terminal<R"raw(*)raw">, Entity<entity_pm_expression>>, And<Terminal<R"raw(/)raw">, Entity<entity_pm_expression>>, And<Terminal<R"raw(%)raw">, Entity<entity_pm_expression>>>);
ENTITY(entity_additive_expression, And<Entity<entity_additive_expression_impl_start>, List<Entity<entity_additive_expression_impl_continue>, 0>>);
ENTITY(entity_additive_expression_impl_start, Or<And<Entity<entity_multiplicative_expression>>>);
ENTITY(entity_additive_expression_impl_continue, Or<And<Terminal<R"raw(+)raw">, Entity<entity_multiplicative_expression>>, And<Terminal<R"raw(-)raw">, Entity<entity_multiplicative_expression>>>);
ENTITY(entity_shift_expression, And<Entity<entity_shift_expression_impl_start>, List<Entity<entity_shift_expression_impl_continue>, 0>>);
ENTITY(entity_shift_expression_impl_start, Or<And<Entity<entity_additive_expression>>>);
ENTITY(entity_shift_expression_impl_continue, Or<And<Terminal<R"raw(<<)raw">, Entity<entity_additive_expression>>, And<Terminal<R"raw(>>)raw">, Entity<entity_additive_expression>>>);
ENTITY(entity_compare_expression, And<Entity<entity_compare_expression_impl_start>, List<Entity<entity_compare_expression_impl_continue>, 0>>);
ENTITY(entity_compare_expression_impl_start, Or<And<Entity<entity_shift_expression>>>);
ENTITY(entity_compare_expression_impl_continue, Or<And<Terminal<R"raw(<=>)raw">, Entity<entity_shift_expression>>>);
ENTITY(entity_relational_expression, And<Entity<entity_relational_expression_impl_start>, List<Entity<entity_relational_expression_impl_continue>, 0>>);
ENTITY(entity_relational_expression_impl_start, Or<And<Entity<entity_compare_expression>>>);
ENTITY(entity_relational_expression_impl_continue, Or<And<Terminal<R"raw(<)raw">, Entity<entity_compare_expression>>, And<Terminal<R"raw(>)raw">, Entity<entity_compare_expression>>, And<Terminal<R"raw(<=)raw">, Entity<entity_compare_expression>>, And<Terminal<R"raw(>=)raw">, Entity<entity_compare_expression>>>);
ENTITY(entity_equality_expression, And<Entity<entity_equality_expression_impl_start>, List<Entity<entity_equality_expression_impl_continue>, 0>>);
ENTITY(entity_equality_expression_impl_start, Or<And<Entity<entity_relational_expression>>>);
ENTITY(entity_equality_expression_impl_continue, Or<And<Terminal<R"raw(==)raw">, Entity<entity_relational_expression>>, And<Terminal<R"raw(!=)raw">, Entity<entity_relational_expression>>>);
ENTITY(entity_and_expression, And<Entity<entity_and_expression_impl_start>, List<Entity<entity_and_expression_impl_continue>, 0>>);
ENTITY(entity_and_expression_impl_start, Or<And<Entity<entity_equality_expression>>>);
ENTITY(entity_and_expression_impl_continue, Or<And<Terminal<R"raw(&)raw">, Entity<entity_equality_expression>>>);
ENTITY(entity_exclusive_or_expression, And<Entity<entity_exclusive_or_expression_impl_start>, List<Entity<entity_exclusive_or_expression_impl_continue>, 0>>);
ENTITY(entity_exclusive_or_expression_impl_start, Or<And<Entity<entity_and_expression>>>);
ENTITY(entity_exclusive_or_expression_impl_continue, Or<And<Terminal<R"raw(^)raw">, Entity<entity_and_expression>>>);
ENTITY(entity_inclusive_or_expression, And<Entity<entity_inclusive_or_expression_impl_start>, List<Entity<entity_inclusive_or_expression_impl_continue>, 0>>);
ENTITY(entity_inclusive_or_expression_impl_start, Or<And<Entity<entity_exclusive_or_expression>>>);
ENTITY(entity_inclusive_or_expression_impl_continue, Or<And<Terminal<R"raw(|)raw">, Entity<entity_exclusive_or_expression>>>);
ENTITY(entity_logical_and_expression, And<Entity<entity_logical_and_expression_impl_start>, List<Entity<entity_logical_and_expression_impl_continue>, 0>>);
ENTITY(entity_logical_and_expression_impl_start, Or<And<Entity<entity_inclusive_or_expression>>>);
ENTITY(entity_logical_and_expression_impl_continue, Or<And<Terminal<R"raw(&&)raw">, Entity<entity_inclusive_or_expression>>>);
ENTITY(entity_logical_or_expression, And<Entity<entity_logical_or_expression_impl_start>, List<Entity<entity_logical_or_expression_impl_continue>, 0>>);
ENTITY(entity_logical_or_expression_impl_start, Or<And<Entity<entity_logical_and_expression>>>);
ENTITY(entity_logical_or_expression_impl_continue, Or<And<Terminal<R"raw(||)raw">, Entity<entity_logical_and_expression>>>);
ENTITY(entity_conditional_expression, Or<And<Entity<entity_logical_or_expression>>, And<Entity<entity_logical_or_expression>, Terminal<R"raw(?)raw">, Entity<entity_expression>, Terminal<R"raw(:)raw">, Entity<entity_assignment_expression>>>);
ENTITY(entity_yield_expression, Or<And<Terminal<R"raw(co_yield)raw">, Entity<entity_assignment_expression>>, And<Terminal<R"raw(co_yield)raw">, Entity<entity_braced_init_list>>>);
ENTITY(entity_throw_expression, Or<And<Keyword<R"raw(throw)raw">, Opt<Entity<entity_assignment_expression>>>>);
ENTITY(entity_assignment_expression, Or<And<Entity<entity_conditional_expression>>, And<Entity<entity_yield_expression>>, And<Entity<entity_throw_expression>>, And<Entity<entity_logical_or_expression>, Entity<entity_assignment_operator>, Entity<entity_initializer_clause>>>);
ENTITY(entity_assignment_operator, Or<And<Terminal<R"raw(=)raw">>, And<Terminal<R"raw(*=)raw">>, And<Terminal<R"raw(/=)raw">>, And<Terminal<R"raw(%=)raw">>, And<Terminal<R"raw(+=)raw">>, And<Terminal<R"raw(-=)raw">>, And<Terminal<R"raw(>>=)raw">>, And<Terminal<R"raw(<<=)raw">>, And<Terminal<R"raw(&=)raw">>, And<Terminal<R"raw(^=)raw">>, And<Terminal<R"raw(|=)raw">>>);
ENTITY(entity_expression, And<Entity<entity_expression_impl_start>, List<Entity<entity_expression_impl_continue>, 0>>);
ENTITY(entity_expression_impl_start, Or<And<Entity<entity_assignment_expression>>>);
ENTITY(entity_expression_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_assignment_expression>>>);
ENTITY(entity_constant_expression, Or<And<Entity<entity_conditional_expression>>>);
ENTITY(entity_statement, Or<And<Entity<entity_labeled_statement>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_expression_statement>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_compound_statement>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_selection_statement>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_iteration_statement>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_jump_statement>>, And<Entity<entity_declaration_statement>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_try_block>>>);
ENTITY(entity_init_statement, Or<And<Entity<entity_expression_statement>>, And<Entity<entity_simple_declaration>>, And<Entity<entity_alias_declaration>>>);
ENTITY(entity_condition, Or<And<Entity<entity_expression>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_decl_specifier_seq>, Entity<entity_declarator>, Entity<entity_brace_or_equal_initializer>>, And<Entity<entity_structured_binding_declaration>, Entity<entity_initializer>>>);
ENTITY(entity_label, Or<And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_identifier>, Terminal<R"raw(:)raw">>, And<Opt<Entity<entity_attribute_specifier_seq>>, Keyword<R"raw(case)raw">, Entity<entity_constant_expression>, Terminal<R"raw(:)raw">>, And<Opt<Entity<entity_attribute_specifier_seq>>, Keyword<R"raw(default)raw">, Terminal<R"raw(:)raw">>>);
ENTITY(entity_labeled_statement, Or<And<Entity<entity_label>, Entity<entity_statement>>>);
ENTITY(entity_expression_statement, Or<And<Opt<Entity<entity_expression>>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_compound_statement, Or<And<Terminal<R"raw({)raw">, Opt<Entity<entity_statement_seq>>, Opt<Entity<entity_label_seq>>, Terminal<R"raw(})raw">>>);
ENTITY(entity_statement_seq, List<Entity<entity_statement>>);
ENTITY(entity_label_seq, List<Entity<entity_label>>);
ENTITY(entity_selection_statement, Or<And<Keyword<R"raw(if)raw">, Opt<Keyword<R"raw(constexpr)raw">>, Terminal<R"raw(()raw">, Opt<Entity<entity_init_statement>>, Entity<entity_condition>, Terminal<R"raw())raw">, Entity<entity_statement>>, And<Keyword<R"raw(if)raw">, Opt<Keyword<R"raw(constexpr)raw">>, Terminal<R"raw(()raw">, Opt<Entity<entity_init_statement>>, Entity<entity_condition>, Terminal<R"raw())raw">, Entity<entity_statement>, Keyword<R"raw(else)raw">, Entity<entity_statement>>, And<Keyword<R"raw(if)raw">, Opt<Terminal<R"raw(!)raw">>, Keyword<R"raw(consteval)raw">, Entity<entity_compound_statement>>, And<Keyword<R"raw(if)raw">, Opt<Terminal<R"raw(!)raw">>, Keyword<R"raw(consteval)raw">, Entity<entity_compound_statement>, Keyword<R"raw(else)raw">, Entity<entity_statement>>, And<Keyword<R"raw(switch)raw">, Terminal<R"raw(()raw">, Opt<Entity<entity_init_statement>>, Entity<entity_condition>, Terminal<R"raw())raw">, Entity<entity_statement>>>);
ENTITY(entity_iteration_statement, Or<And<Keyword<R"raw(while)raw">, Terminal<R"raw(()raw">, Entity<entity_condition>, Terminal<R"raw())raw">, Entity<entity_statement>>, And<Keyword<R"raw(do)raw">, Entity<entity_statement>, Keyword<R"raw(while)raw">, Terminal<R"raw(()raw">, Entity<entity_expression>, Terminal<R"raw())raw">, Terminal<R"raw(;)raw">>, And<Keyword<R"raw(for)raw">, Terminal<R"raw(()raw">, Entity<entity_init_statement>, Opt<Entity<entity_condition>>, Terminal<R"raw(;)raw">, Opt<Entity<entity_expression>>, Terminal<R"raw())raw">, Entity<entity_statement>>, And<Keyword<R"raw(for)raw">, Terminal<R"raw(()raw">, Opt<Entity<entity_init_statement>>, Entity<entity_for_range_declaration>, Terminal<R"raw(:)raw">, Entity<entity_for_range_initializer>, Terminal<R"raw())raw">, Entity<entity_statement>>>);
ENTITY(entity_for_range_declaration, Or<And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_decl_specifier_seq>, Entity<entity_declarator>>, And<Entity<entity_structured_binding_declaration>>>);
ENTITY(entity_for_range_initializer, Or<And<Entity<entity_expr_or_braced_init_list>>>);
ENTITY(entity_jump_statement, Or<And<Keyword<R"raw(break)raw">, Terminal<R"raw(;)raw">>, And<Keyword<R"raw(continue)raw">, Terminal<R"raw(;)raw">>, And<Keyword<R"raw(return)raw">, Opt<Entity<entity_expr_or_braced_init_list>>, Terminal<R"raw(;)raw">>, And<Entity<entity_coroutine_return_statement>>, And<Keyword<R"raw(goto)raw">, Entity<entity_identifier>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_coroutine_return_statement, Or<And<Terminal<R"raw(co_return)raw">, Opt<Entity<entity_expr_or_braced_init_list>>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_declaration_statement, Or<And<Entity<entity_block_declaration>>>);
ENTITY(entity_declaration_seq, List<Entity<entity_declaration>>);
ENTITY(entity_declaration, Or<And<Entity<entity_name_declaration>>, And<Entity<entity_special_declaration>>>);
ENTITY(entity_name_declaration, Or<And<Entity<entity_block_declaration>>, And<Entity<entity_nodeclspec_function_declaration>>, And<Entity<entity_function_definition>>, And<Entity<entity_friend_type_declaration>>, And<Entity<entity_template_declaration>>, And<Entity<entity_deduction_guide>>, And<Entity<entity_linkage_specification>>, And<Entity<entity_namespace_definition>>, And<Entity<entity_empty_declaration>>, And<Entity<entity_attribute_declaration>>, And<Entity<entity_module_import_declaration>>>);
ENTITY(entity_special_declaration, Or<And<Entity<entity_explicit_instantiation>>, And<Entity<entity_explicit_specialization>>, And<Entity<entity_export_declaration>>>);
ENTITY(entity_block_declaration, Or<And<Entity<entity_simple_declaration>>, And<Entity<entity_asm_declaration>>, And<Entity<entity_namespace_alias_definition>>, And<Entity<entity_using_declaration>>, And<Entity<entity_using_enum_declaration>>, And<Entity<entity_using_directive>>, And<Entity<entity_static_assert_declaration>>, And<Entity<entity_alias_declaration>>, And<Entity<entity_opaque_enum_declaration>>>);
ENTITY(entity_nodeclspec_function_declaration, Or<And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_declarator>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_alias_declaration, Or<And<Keyword<R"raw(using)raw">, Entity<entity_identifier>, Opt<Entity<entity_attribute_specifier_seq>>, Terminal<R"raw(=)raw">, Entity<entity_defining_type_id>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_sb_identifier, Or<And<Opt<Terminal<R"raw(...)raw">>, Entity<entity_identifier>, Opt<Entity<entity_attribute_specifier_seq>>>>);
ENTITY(entity_sb_identifier_list, And<Entity<entity_sb_identifier_list_impl_start>, List<Entity<entity_sb_identifier_list_impl_continue>, 0>>);
ENTITY(entity_sb_identifier_list_impl_start, Or<And<Entity<entity_sb_identifier>>>);
ENTITY(entity_sb_identifier_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_sb_identifier>>>);
ENTITY(entity_structured_binding_declaration, Or<And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_decl_specifier_seq>, Opt<Entity<entity_ref_qualifier>>, Terminal<R"raw([)raw">, Entity<entity_sb_identifier_list>, Terminal<R"raw(])raw">>>);
ENTITY(entity_simple_declaration, Or<And<Entity<entity_decl_specifier_seq>, Opt<Entity<entity_init_declarator_list>>, Terminal<R"raw(;)raw">>, And<Entity<entity_attribute_specifier_seq>, Entity<entity_decl_specifier_seq>, Entity<entity_init_declarator_list>, Terminal<R"raw(;)raw">>, And<Entity<entity_structured_binding_declaration>, Entity<entity_initializer>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_static_assert_message, Or<And<Entity<entity_unevaluated_string>>, And<Entity<entity_constant_expression>>>);
ENTITY(entity_static_assert_declaration, Or<And<Keyword<R"raw(static_assert)raw">, Terminal<R"raw(()raw">, Entity<entity_constant_expression>, Terminal<R"raw())raw">, Terminal<R"raw(;)raw">>, And<Keyword<R"raw(static_assert)raw">, Terminal<R"raw(()raw">, Entity<entity_constant_expression>, Terminal<R"raw(,)raw">, Entity<entity_static_assert_message>, Terminal<R"raw())raw">, Terminal<R"raw(;)raw">>>);
ENTITY(entity_empty_declaration, Or<And<Terminal<R"raw(;)raw">>>);
ENTITY(entity_attribute_declaration, Or<And<Entity<entity_attribute_specifier_seq>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_decl_specifier, Or<And<Entity<entity_storage_class_specifier>>, And<Entity<entity_defining_type_specifier>>, And<Entity<entity_function_specifier>>, And<Keyword<R"raw(friend)raw">>, And<Keyword<R"raw(typedef)raw">>, And<Keyword<R"raw(constexpr)raw">>, And<Keyword<R"raw(consteval)raw">>, And<Keyword<R"raw(constinit)raw">>, And<Keyword<R"raw(inline)raw">>>);
ENTITY(entity_decl_specifier_seq, Or<And<Entity<entity_decl_specifier>, Opt<Entity<entity_attribute_specifier_seq>>>, And<Entity<entity_decl_specifier>, Entity<entity_decl_specifier_seq>>>);
ENTITY(entity_storage_class_specifier, Or<And<Keyword<R"raw(static)raw">>, And<Keyword<R"raw(thread_local)raw">>, And<Keyword<R"raw(extern)raw">>, And<Keyword<R"raw(mutable)raw">>>);
ENTITY(entity_function_specifier, Or<And<Keyword<R"raw(virtual)raw">>, And<Entity<entity_explicit_specifier>>>);
ENTITY(entity_explicit_specifier, Or<And<Keyword<R"raw(explicit)raw">, Terminal<R"raw(()raw">, Entity<entity_constant_expression>, Terminal<R"raw())raw">>, And<Keyword<R"raw(explicit)raw">>>);
ENTITY(entity_typedef_name, Or<And<Entity<entity_identifier>>, And<Entity<entity_simple_template_id>>>);
ENTITY(entity_type_specifier, Or<And<Entity<entity_simple_type_specifier>>, And<Entity<entity_elaborated_type_specifier>>, And<Entity<entity_typename_specifier>>, And<Entity<entity_cv_qualifier>>>);
ENTITY(entity_type_specifier_seq, Or<And<Entity<entity_type_specifier>, Opt<Entity<entity_attribute_specifier_seq>>>, And<Entity<entity_type_specifier>, Entity<entity_type_specifier_seq>>>);
ENTITY(entity_defining_type_specifier, Or<And<Entity<entity_type_specifier>>, And<Entity<entity_class_specifier>>, And<Entity<entity_enum_specifier>>>);
ENTITY(entity_defining_type_specifier_seq, Or<And<Entity<entity_defining_type_specifier>, Opt<Entity<entity_attribute_specifier_seq>>>, And<Entity<entity_defining_type_specifier>, Entity<entity_defining_type_specifier_seq>>>);
ENTITY(entity_simple_type_specifier, Or<And<Opt<Entity<entity_nested_name_specifier>>, Entity<entity_type_name>>, And<Entity<entity_nested_name_specifier>, Keyword<R"raw(template)raw">, Entity<entity_simple_template_id>>, And<Entity<entity_computed_type_specifier>>, And<Entity<entity_placeholder_type_specifier>>, And<Opt<Entity<entity_nested_name_specifier>>, Entity<entity_template_name>>, And<Keyword<R"raw(char)raw">>, And<Keyword<R"raw(char8_t)raw">>, And<Keyword<R"raw(char16_t)raw">>, And<Keyword<R"raw(char32_t)raw">>, And<Keyword<R"raw(wchar_t)raw">>, And<Keyword<R"raw(bool)raw">>, And<Keyword<R"raw(short)raw">>, And<Keyword<R"raw(int)raw">>, And<Keyword<R"raw(long)raw">>, And<Keyword<R"raw(signed)raw">>, And<Keyword<R"raw(unsigned)raw">>, And<Keyword<R"raw(float)raw">>, And<Keyword<R"raw(double)raw">>, And<Keyword<R"raw(void)raw">>>);
ENTITY(entity_type_name, Or<And<Entity<entity_class_name>>, And<Entity<entity_enum_name>>, And<Entity<entity_typedef_name>>>);
ENTITY(entity_computed_type_specifier, Or<And<Entity<entity_decltype_specifier>>, And<Entity<entity_pack_index_specifier>>>);
ENTITY(entity_pack_index_specifier, Or<And<Entity<entity_typedef_name>, Terminal<R"raw(...)raw">, Terminal<R"raw([)raw">, Entity<entity_constant_expression>, Terminal<R"raw(])raw">>>);
ENTITY(entity_elaborated_type_specifier, Or<And<Entity<entity_class_key>, Opt<Entity<entity_attribute_specifier_seq>>, Opt<Entity<entity_nested_name_specifier>>, Entity<entity_identifier>>, And<Entity<entity_class_key>, Entity<entity_simple_template_id>>, And<Entity<entity_class_key>, Entity<entity_nested_name_specifier>, Opt<Keyword<R"raw(template)raw">>, Entity<entity_simple_template_id>>, And<Keyword<R"raw(enum)raw">, Opt<Entity<entity_nested_name_specifier>>, Entity<entity_identifier>>>);
ENTITY(entity_decltype_specifier, Or<And<Keyword<R"raw(decltype)raw">, Terminal<R"raw(()raw">, Entity<entity_expression>, Terminal<R"raw())raw">>>);
ENTITY(entity_placeholder_type_specifier, Or<And<Opt<Entity<entity_type_constraint>>, Keyword<R"raw(auto)raw">>, And<Opt<Entity<entity_type_constraint>>, Keyword<R"raw(decltype)raw">, Terminal<R"raw(()raw">, Keyword<R"raw(auto)raw">, Terminal<R"raw())raw">>>);
ENTITY(entity_init_declarator_list, And<Entity<entity_init_declarator_list_impl_start>, List<Entity<entity_init_declarator_list_impl_continue>, 0>>);
ENTITY(entity_init_declarator_list_impl_start, Or<And<Entity<entity_init_declarator>>>);
ENTITY(entity_init_declarator_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_init_declarator>>>);
ENTITY(entity_init_declarator, Or<And<Entity<entity_declarator>, Opt<Entity<entity_initializer>>>, And<Entity<entity_declarator>, Entity<entity_requires_clause>>>);
ENTITY(entity_declarator, Or<And<Entity<entity_ptr_declarator>>, And<Entity<entity_noptr_declarator>, Entity<entity_parameters_and_qualifiers>, Entity<entity_trailing_return_type>>>);
ENTITY(entity_ptr_declarator, Or<And<Entity<entity_noptr_declarator>>, And<Entity<entity_ptr_operator>, Entity<entity_ptr_declarator>>>);
ENTITY(entity_noptr_declarator, And<Entity<entity_noptr_declarator_impl_start>, List<Entity<entity_noptr_declarator_impl_continue>, 0>>);
ENTITY(entity_noptr_declarator_impl_start, Or<And<Entity<entity_declarator_id>, Opt<Entity<entity_attribute_specifier_seq>>>, And<Terminal<R"raw(()raw">, Entity<entity_ptr_declarator>, Terminal<R"raw())raw">>>);
ENTITY(entity_noptr_declarator_impl_continue, Or<And<Entity<entity_parameters_and_qualifiers>>, And<Terminal<R"raw([)raw">, Opt<Entity<entity_constant_expression>>, Terminal<R"raw(])raw">, Opt<Entity<entity_attribute_specifier_seq>>>>);
ENTITY(entity_parameters_and_qualifiers, Or<And<Terminal<R"raw(()raw">, Entity<entity_parameter_declaration_clause>, Terminal<R"raw())raw">, Opt<Entity<entity_cv_qualifier_seq>>>, And<Opt<Entity<entity_ref_qualifier>>, Opt<Entity<entity_noexcept_specifier>>, Opt<Entity<entity_attribute_specifier_seq>>>>);
ENTITY(entity_trailing_return_type, Or<And<Terminal<R"raw(->)raw">, Entity<entity_type_id>>>);
ENTITY(entity_ptr_operator, Or<And<Terminal<R"raw(*)raw">, Opt<Entity<entity_attribute_specifier_seq>>, Opt<Entity<entity_cv_qualifier_seq>>>, And<Terminal<R"raw(&)raw">, Opt<Entity<entity_attribute_specifier_seq>>>, And<Terminal<R"raw(&&)raw">, Opt<Entity<entity_attribute_specifier_seq>>>, And<Entity<entity_nested_name_specifier>, Terminal<R"raw(*)raw">, Opt<Entity<entity_attribute_specifier_seq>>, Opt<Entity<entity_cv_qualifier_seq>>>>);
ENTITY(entity_cv_qualifier_seq, List<Entity<entity_cv_qualifier>>);
ENTITY(entity_cv_qualifier, Or<And<Keyword<R"raw(const)raw">>, And<Keyword<R"raw(volatile)raw">>>);
ENTITY(entity_ref_qualifier, Or<And<Terminal<R"raw(&)raw">>, And<Terminal<R"raw(&&)raw">>>);
ENTITY(entity_declarator_id, Or<And<Opt<Terminal<R"raw(...)raw">>, Entity<entity_id_expression>>>);
ENTITY(entity_type_id, Or<And<Entity<entity_type_specifier_seq>, Opt<Entity<entity_abstract_declarator>>>>);
ENTITY(entity_defining_type_id, Or<And<Entity<entity_defining_type_specifier_seq>, Opt<Entity<entity_abstract_declarator>>>>);
ENTITY(entity_abstract_declarator, Or<And<Entity<entity_ptr_abstract_declarator>>, And<Opt<Entity<entity_noptr_abstract_declarator>>, Entity<entity_parameters_and_qualifiers>, Entity<entity_trailing_return_type>>, And<Entity<entity_abstract_pack_declarator>>>);
ENTITY(entity_ptr_abstract_declarator, Or<And<Entity<entity_noptr_abstract_declarator>>, And<Entity<entity_ptr_operator>, Opt<Entity<entity_ptr_abstract_declarator>>>>);
ENTITY(entity_noptr_abstract_declarator, Or<And<Opt<Entity<entity_noptr_abstract_declarator>>, Entity<entity_parameters_and_qualifiers>>, And<Opt<Entity<entity_noptr_abstract_declarator>>, Terminal<R"raw([)raw">, Opt<Entity<entity_constant_expression>>, Terminal<R"raw(])raw">, Opt<Entity<entity_attribute_specifier_seq>>>, And<Terminal<R"raw(()raw">, Entity<entity_ptr_abstract_declarator>, Terminal<R"raw())raw">>>);
ENTITY(entity_abstract_pack_declarator, Or<And<Entity<entity_noptr_abstract_pack_declarator>>, And<Entity<entity_ptr_operator>, Entity<entity_abstract_pack_declarator>>>);
ENTITY(entity_noptr_abstract_pack_declarator, And<Entity<entity_noptr_abstract_pack_declarator_impl_start>, List<Entity<entity_noptr_abstract_pack_declarator_impl_continue>, 0>>);
ENTITY(entity_noptr_abstract_pack_declarator_impl_start, Or<And<Terminal<R"raw(...)raw">>>);
ENTITY(entity_noptr_abstract_pack_declarator_impl_continue, Or<And<Entity<entity_parameters_and_qualifiers>>>);
ENTITY(entity_parameter_declaration_clause, Or<And<Terminal<R"raw(...)raw">>, And<Opt<Entity<entity_parameter_declaration_list>>>, And<Entity<entity_parameter_declaration_list>, Terminal<R"raw(,)raw">, Terminal<R"raw(...)raw">>, And<Entity<entity_parameter_declaration_list>, Terminal<R"raw(...)raw">>>);
ENTITY(entity_parameter_declaration_list, And<Entity<entity_parameter_declaration_list_impl_start>, List<Entity<entity_parameter_declaration_list_impl_continue>, 0>>);
ENTITY(entity_parameter_declaration_list_impl_start, Or<And<Entity<entity_parameter_declaration>>>);
ENTITY(entity_parameter_declaration_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_parameter_declaration>>>);
ENTITY(entity_parameter_declaration, Or<And<Opt<Entity<entity_attribute_specifier_seq>>, Opt<Keyword<R"raw(this)raw">>, Entity<entity_decl_specifier_seq>, Entity<entity_declarator>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_decl_specifier_seq>, Entity<entity_declarator>, Terminal<R"raw(=)raw">, Entity<entity_initializer_clause>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Opt<Keyword<R"raw(this)raw">>, Entity<entity_decl_specifier_seq>, Opt<Entity<entity_abstract_declarator>>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_decl_specifier_seq>, Opt<Entity<entity_abstract_declarator>>, Terminal<R"raw(=)raw">, Entity<entity_initializer_clause>>>);
ENTITY(entity_initializer, Or<And<Entity<entity_brace_or_equal_initializer>>, And<Terminal<R"raw(()raw">, Entity<entity_expression_list>, Terminal<R"raw())raw">>>);
ENTITY(entity_brace_or_equal_initializer, Or<And<Terminal<R"raw(=)raw">, Entity<entity_initializer_clause>>, And<Entity<entity_braced_init_list>>>);
ENTITY(entity_initializer_clause, Or<And<Entity<entity_assignment_expression>>, And<Entity<entity_braced_init_list>>>);
ENTITY(entity_braced_init_list, Or<And<Terminal<R"raw({)raw">, Entity<entity_initializer_list>, Opt<Terminal<R"raw(,)raw">>, Terminal<R"raw(})raw">>, And<Terminal<R"raw({)raw">, Entity<entity_designated_initializer_list>, Opt<Terminal<R"raw(,)raw">>, Terminal<R"raw(})raw">>, And<Terminal<R"raw({)raw">, Terminal<R"raw(})raw">>>);
ENTITY(entity_initializer_list, And<Entity<entity_initializer_list_impl_start>, List<Entity<entity_initializer_list_impl_continue>, 0>>);
ENTITY(entity_initializer_list_impl_start, Or<And<Entity<entity_initializer_clause>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_initializer_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_initializer_clause>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_designated_initializer_list, And<Entity<entity_designated_initializer_list_impl_start>, List<Entity<entity_designated_initializer_list_impl_continue>, 0>>);
ENTITY(entity_designated_initializer_list_impl_start, Or<And<Entity<entity_designated_initializer_clause>>>);
ENTITY(entity_designated_initializer_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_designated_initializer_clause>>>);
ENTITY(entity_designated_initializer_clause, Or<And<Entity<entity_designator>, Entity<entity_brace_or_equal_initializer>>>);
ENTITY(entity_designator, Or<And<Terminal<R"raw(.)raw">, Entity<entity_identifier>>>);
ENTITY(entity_expr_or_braced_init_list, Or<And<Entity<entity_expression>>, And<Entity<entity_braced_init_list>>>);
ENTITY(entity_function_definition, Or<And<Opt<Entity<entity_attribute_specifier_seq>>, Opt<Entity<entity_decl_specifier_seq>>, Entity<entity_declarator>, Opt<Entity<entity_virt_specifier_seq>>, Entity<entity_function_body>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Opt<Entity<entity_decl_specifier_seq>>, Entity<entity_declarator>, Entity<entity_requires_clause>, Entity<entity_function_body>>>);
ENTITY(entity_function_body, Or<And<Opt<Entity<entity_ctor_initializer>>, Entity<entity_compound_statement>>, And<Entity<entity_function_try_block>>, And<Terminal<R"raw(=)raw">, Keyword<R"raw(default)raw">, Terminal<R"raw(;)raw">>, And<Entity<entity_deleted_function_body>>>);
ENTITY(entity_deleted_function_body, Or<And<Terminal<R"raw(=)raw">, Keyword<R"raw(delete)raw">, Terminal<R"raw(;)raw">>, And<Terminal<R"raw(=)raw">, Keyword<R"raw(delete)raw">, Terminal<R"raw(()raw">, Entity<entity_unevaluated_string>, Terminal<R"raw())raw">, Terminal<R"raw(;)raw">>>);
ENTITY(entity_enum_name, Or<And<Entity<entity_identifier>>>);
ENTITY(entity_enum_specifier, Or<And<Entity<entity_enum_head>, Terminal<R"raw({)raw">, Opt<Entity<entity_enumerator_list>>, Terminal<R"raw(})raw">>, And<Entity<entity_enum_head>, Terminal<R"raw({)raw">, Entity<entity_enumerator_list>, Terminal<R"raw(,)raw">, Terminal<R"raw(})raw">>>);
ENTITY(entity_enum_head, Or<And<Entity<entity_enum_key>, Opt<Entity<entity_attribute_specifier_seq>>, Opt<Entity<entity_enum_head_name>>, Opt<Entity<entity_enum_base>>>>);
ENTITY(entity_enum_head_name, Or<And<Opt<Entity<entity_nested_name_specifier>>, Entity<entity_identifier>>>);
ENTITY(entity_opaque_enum_declaration, Or<And<Entity<entity_enum_key>, Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_enum_head_name>, Opt<Entity<entity_enum_base>>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_enum_key, Or<And<Keyword<R"raw(enum)raw">>, And<Keyword<R"raw(enum)raw">, Keyword<R"raw(class)raw">>, And<Keyword<R"raw(enum)raw">, Keyword<R"raw(struct)raw">>>);
ENTITY(entity_enum_base, Or<And<Terminal<R"raw(:)raw">, Entity<entity_type_specifier_seq>>>);
ENTITY(entity_enumerator_list, And<Entity<entity_enumerator_list_impl_start>, List<Entity<entity_enumerator_list_impl_continue>, 0>>);
ENTITY(entity_enumerator_list_impl_start, Or<And<Entity<entity_enumerator_definition>>>);
ENTITY(entity_enumerator_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_enumerator_definition>>>);
ENTITY(entity_enumerator_definition, Or<And<Entity<entity_enumerator>>, And<Entity<entity_enumerator>, Terminal<R"raw(=)raw">, Entity<entity_constant_expression>>>);
ENTITY(entity_enumerator, Or<And<Entity<entity_identifier>, Opt<Entity<entity_attribute_specifier_seq>>>>);
ENTITY(entity_using_enum_declaration, Or<And<Keyword<R"raw(using)raw">, Keyword<R"raw(enum)raw">, Entity<entity_using_enum_declarator>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_using_enum_declarator, Or<And<Opt<Entity<entity_nested_name_specifier>>, Entity<entity_identifier>>, And<Opt<Entity<entity_nested_name_specifier>>, Entity<entity_simple_template_id>>>);
ENTITY(entity_namespace_name, Or<And<Entity<entity_identifier>>, And<Entity<entity_namespace_alias>>>);
ENTITY(entity_namespace_definition, Or<And<Entity<entity_named_namespace_definition>>, And<Entity<entity_unnamed_namespace_definition>>, And<Entity<entity_nested_namespace_definition>>>);
ENTITY(entity_named_namespace_definition, Or<And<Opt<Keyword<R"raw(inline)raw">>, Keyword<R"raw(namespace)raw">, Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_identifier>, Terminal<R"raw({)raw">, Entity<entity_namespace_body>, Terminal<R"raw(})raw">>>);
ENTITY(entity_unnamed_namespace_definition, Or<And<Opt<Keyword<R"raw(inline)raw">>, Keyword<R"raw(namespace)raw">, Opt<Entity<entity_attribute_specifier_seq>>, Terminal<R"raw({)raw">, Entity<entity_namespace_body>, Terminal<R"raw(})raw">>>);
ENTITY(entity_nested_namespace_definition, Or<And<Keyword<R"raw(namespace)raw">, Entity<entity_enclosing_namespace_specifier>, Terminal<R"raw(::)raw">, Opt<Keyword<R"raw(inline)raw">>, Entity<entity_identifier>, Terminal<R"raw({)raw">, Entity<entity_namespace_body>, Terminal<R"raw(})raw">>>);
ENTITY(entity_enclosing_namespace_specifier, And<Entity<entity_enclosing_namespace_specifier_impl_start>, List<Entity<entity_enclosing_namespace_specifier_impl_continue>, 0>>);
ENTITY(entity_enclosing_namespace_specifier_impl_start, Or<And<Entity<entity_identifier>>>);
ENTITY(entity_enclosing_namespace_specifier_impl_continue, Or<And<Terminal<R"raw(::)raw">, Opt<Keyword<R"raw(inline)raw">>, Entity<entity_identifier>>>);
ENTITY(entity_namespace_body, Or<And<Opt<Entity<entity_declaration_seq>>>>);
ENTITY(entity_namespace_alias, Or<And<Entity<entity_identifier>>>);
ENTITY(entity_namespace_alias_definition, Or<And<Keyword<R"raw(namespace)raw">, Entity<entity_identifier>, Terminal<R"raw(=)raw">, Entity<entity_qualified_namespace_specifier>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_qualified_namespace_specifier, Or<And<Opt<Entity<entity_nested_name_specifier>>, Entity<entity_namespace_name>>>);
ENTITY(entity_using_directive, Or<And<Opt<Entity<entity_attribute_specifier_seq>>, Keyword<R"raw(using)raw">, Keyword<R"raw(namespace)raw">, Opt<Entity<entity_nested_name_specifier>>, Entity<entity_namespace_name>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_using_declaration, Or<And<Keyword<R"raw(using)raw">, Entity<entity_using_declarator_list>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_using_declarator_list, And<Entity<entity_using_declarator_list_impl_start>, List<Entity<entity_using_declarator_list_impl_continue>, 0>>);
ENTITY(entity_using_declarator_list_impl_start, Or<And<Entity<entity_using_declarator>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_using_declarator_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_using_declarator>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_using_declarator, Or<And<Opt<Keyword<R"raw(typename)raw">>, Entity<entity_nested_name_specifier>, Entity<entity_unqualified_id>>>);
ENTITY(entity_asm_declaration, Or<And<Opt<Entity<entity_attribute_specifier_seq>>, Keyword<R"raw(asm)raw">, Terminal<R"raw(()raw">, Entity<entity_balanced_token_seq>, Terminal<R"raw())raw">, Terminal<R"raw(;)raw">>>);
ENTITY(entity_linkage_specification, Or<And<Keyword<R"raw(extern)raw">, Entity<entity_unevaluated_string>, Terminal<R"raw({)raw">, Opt<Entity<entity_declaration_seq>>, Terminal<R"raw(})raw">>, And<Keyword<R"raw(extern)raw">, Entity<entity_unevaluated_string>, Entity<entity_name_declaration>>>);
ENTITY(entity_attribute_specifier_seq, List<Entity<entity_attribute_specifier>>);
ENTITY(entity_attribute_specifier, Or<And<Terminal<R"raw([)raw">, Terminal<R"raw([)raw">, Opt<Entity<entity_attribute_using_prefix>>, Entity<entity_attribute_list>, Terminal<R"raw(])raw">, Terminal<R"raw(])raw">>, And<Entity<entity_alignment_specifier>>>);
ENTITY(entity_alignment_specifier, Or<And<Keyword<R"raw(alignas)raw">, Terminal<R"raw(()raw">, Entity<entity_type_id>, Opt<Terminal<R"raw(...)raw">>, Terminal<R"raw())raw">>, And<Keyword<R"raw(alignas)raw">, Terminal<R"raw(()raw">, Entity<entity_constant_expression>, Opt<Terminal<R"raw(...)raw">>, Terminal<R"raw())raw">>>);
ENTITY(entity_attribute_using_prefix, Or<And<Keyword<R"raw(using)raw">, Entity<entity_attribute_namespace>, Terminal<R"raw(:)raw">>>);
ENTITY(entity_attribute_list, And<Entity<entity_attribute_list_impl_start>, List<Entity<entity_attribute_list_impl_continue>, 0>>);
ENTITY(entity_attribute_list_impl_start, Or<And<Opt<Entity<entity_attribute>>>, And<Entity<entity_attribute>, Terminal<R"raw(...)raw">>>);
ENTITY(entity_attribute_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Opt<Entity<entity_attribute>>>, And<Terminal<R"raw(,)raw">, Entity<entity_attribute>, Terminal<R"raw(...)raw">>>);
ENTITY(entity_attribute, Or<And<Entity<entity_attribute_token>, Opt<Entity<entity_attribute_argument_clause>>>>);
ENTITY(entity_attribute_token, Or<And<Entity<entity_identifier>>, And<Entity<entity_attribute_scoped_token>>>);
ENTITY(entity_attribute_scoped_token, Or<And<Entity<entity_attribute_namespace>, Terminal<R"raw(::)raw">, Entity<entity_identifier>>>);
ENTITY(entity_attribute_namespace, Or<And<Entity<entity_identifier>>>);
ENTITY(entity_attribute_argument_clause, Or<And<Terminal<R"raw(()raw">, Opt<Entity<entity_balanced_token_seq>>, Terminal<R"raw())raw">>>);
ENTITY(entity_balanced_token_seq, List<Entity<entity_balanced_token>>);
ENTITY(entity_balanced_token, Or<And<Terminal<R"raw(()raw">, Opt<Entity<entity_balanced_token_seq>>, Terminal<R"raw())raw">>, And<Terminal<R"raw([)raw">, Opt<Entity<entity_balanced_token_seq>>, Terminal<R"raw(])raw">>, And<Terminal<R"raw({)raw">, Opt<Entity<entity_balanced_token_seq>>, Terminal<R"raw(})raw">>, And<UnimplementedTODO<> /* textnormal{ 'any' grammarterm{ 'token' } 'other' 'than' 'a' 'parenthesis,' 'a' 'bracket,' 'or' 'a' 'brace' } */>>);
ENTITY(entity_module_declaration, Or<And<Opt<Entity<entity_export_keyword>>, Entity<entity_module_keyword>, Entity<entity_module_name>, Opt<Entity<entity_module_partition>>, Opt<Entity<entity_attribute_specifier_seq>>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_module_name, Or<And<Opt<Entity<entity_module_name_qualifier>>, Entity<entity_identifier>>>);
ENTITY(entity_module_partition, Or<And<Terminal<R"raw(:)raw">, Opt<Entity<entity_module_name_qualifier>>, Entity<entity_identifier>>>);
ENTITY(entity_module_name_qualifier, And<Entity<entity_module_name_qualifier_impl_start>, List<Entity<entity_module_name_qualifier_impl_continue>, 0>>);
ENTITY(entity_module_name_qualifier_impl_start, Or<And<Entity<entity_identifier>, Terminal<R"raw(.)raw">>>);
ENTITY(entity_module_name_qualifier_impl_continue, Or<And<Entity<entity_identifier>, Terminal<R"raw(.)raw">>>);
ENTITY(entity_export_declaration, Or<And<Keyword<R"raw(export)raw">, Entity<entity_name_declaration>>, And<Keyword<R"raw(export)raw">, Terminal<R"raw({)raw">, Opt<Entity<entity_declaration_seq>>, Terminal<R"raw(})raw">>, And<Entity<entity_export_keyword>, Entity<entity_module_import_declaration>>>);
ENTITY(entity_module_import_declaration, Or<And<Entity<entity_import_keyword>, Entity<entity_module_name>, Opt<Entity<entity_attribute_specifier_seq>>, Terminal<R"raw(;)raw">>, And<Entity<entity_import_keyword>, Entity<entity_module_partition>, Opt<Entity<entity_attribute_specifier_seq>>, Terminal<R"raw(;)raw">>, And<Entity<entity_import_keyword>, Entity<entity_header_name>, Opt<Entity<entity_attribute_specifier_seq>>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_global_module_fragment, Or<And<Entity<entity_module_keyword>, Terminal<R"raw(;)raw">, Opt<Entity<entity_declaration_seq>>>>);
ENTITY(entity_private_module_fragment, Or<And<Entity<entity_module_keyword>, Terminal<R"raw(:)raw">, Keyword<R"raw(private)raw">, Terminal<R"raw(;)raw">, Opt<Entity<entity_declaration_seq>>>>);
ENTITY(entity_class_name, Or<And<Entity<entity_identifier>>, And<Entity<entity_simple_template_id>>>);
ENTITY(entity_class_specifier, Or<And<Entity<entity_class_head>, Terminal<R"raw({)raw">, Opt<Entity<entity_member_specification>>, Terminal<R"raw(})raw">>>);
ENTITY(entity_class_head, Or<And<Entity<entity_class_key>, Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_class_head_name>, Opt<Entity<entity_class_virt_specifier>>, Opt<Entity<entity_base_clause>>>, And<Entity<entity_class_key>, Opt<Entity<entity_attribute_specifier_seq>>, Opt<Entity<entity_base_clause>>>>);
ENTITY(entity_class_head_name, Or<And<Opt<Entity<entity_nested_name_specifier>>, Entity<entity_class_name>>>);
ENTITY(entity_class_virt_specifier, Or<And<Keyword<R"raw(final)raw">>>);
ENTITY(entity_class_key, Or<And<Keyword<R"raw(class)raw">>, And<Keyword<R"raw(struct)raw">>, And<Keyword<R"raw(union)raw">>>);
ENTITY(entity_member_specification, Or<And<Entity<entity_member_declaration>, Opt<Entity<entity_member_specification>>>, And<Entity<entity_access_specifier>, Terminal<R"raw(:)raw">, Opt<Entity<entity_member_specification>>>>);
ENTITY(entity_member_declaration, Or<And<Opt<Entity<entity_attribute_specifier_seq>>, Opt<Entity<entity_decl_specifier_seq>>, Opt<Entity<entity_member_declarator_list>>, Terminal<R"raw(;)raw">>, And<Entity<entity_function_definition>>, And<Entity<entity_friend_type_declaration>>, And<Entity<entity_using_declaration>>, And<Entity<entity_using_enum_declaration>>, And<Entity<entity_static_assert_declaration>>, And<Entity<entity_template_declaration>>, And<Entity<entity_explicit_specialization>>, And<Entity<entity_deduction_guide>>, And<Entity<entity_alias_declaration>>, And<Entity<entity_opaque_enum_declaration>>, And<Entity<entity_empty_declaration>>>);
ENTITY(entity_member_declarator_list, And<Entity<entity_member_declarator_list_impl_start>, List<Entity<entity_member_declarator_list_impl_continue>, 0>>);
ENTITY(entity_member_declarator_list_impl_start, Or<And<Entity<entity_member_declarator>>>);
ENTITY(entity_member_declarator_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_member_declarator>>>);
ENTITY(entity_member_declarator, Or<And<Entity<entity_declarator>, Opt<Entity<entity_virt_specifier_seq>>, Opt<Entity<entity_pure_specifier>>>, And<Entity<entity_declarator>, Entity<entity_requires_clause>>, And<Entity<entity_declarator>, Entity<entity_brace_or_equal_initializer>>, And<Opt<Entity<entity_identifier>>, Opt<Entity<entity_attribute_specifier_seq>>, Terminal<R"raw(:)raw">, Entity<entity_constant_expression>, Opt<Entity<entity_brace_or_equal_initializer>>>>);
ENTITY(entity_virt_specifier_seq, List<Entity<entity_virt_specifier>>);
ENTITY(entity_virt_specifier, Or<And<Keyword<R"raw(override)raw">>, And<Keyword<R"raw(final)raw">>>);
ENTITY(entity_pure_specifier, Or<And<Terminal<R"raw(=)raw">, Terminal<R"raw(0)raw">>>);
ENTITY(entity_friend_type_declaration, Or<And<Keyword<R"raw(friend)raw">, Entity<entity_friend_type_specifier_list>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_friend_type_specifier_list, And<Entity<entity_friend_type_specifier_list_impl_start>, List<Entity<entity_friend_type_specifier_list_impl_continue>, 0>>);
ENTITY(entity_friend_type_specifier_list_impl_start, Or<And<Entity<entity_friend_type_specifier>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_friend_type_specifier_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_friend_type_specifier>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_friend_type_specifier, Or<And<Entity<entity_simple_type_specifier>>, And<Entity<entity_elaborated_type_specifier>>, And<Entity<entity_typename_specifier>>>);
ENTITY(entity_conversion_function_id, Or<And<Keyword<R"raw(operator)raw">, Entity<entity_conversion_type_id>>>);
ENTITY(entity_conversion_type_id, Or<And<Entity<entity_type_specifier_seq>, Opt<Entity<entity_conversion_declarator>>>>);
ENTITY(entity_conversion_declarator, List<Entity<entity_ptr_operator>>);
ENTITY(entity_base_clause, Or<And<Terminal<R"raw(:)raw">, Entity<entity_base_specifier_list>>>);
ENTITY(entity_base_specifier_list, And<Entity<entity_base_specifier_list_impl_start>, List<Entity<entity_base_specifier_list_impl_continue>, 0>>);
ENTITY(entity_base_specifier_list_impl_start, Or<And<Entity<entity_base_specifier>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_base_specifier_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_base_specifier>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_base_specifier, Or<And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_class_or_decltype>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Keyword<R"raw(virtual)raw">, Opt<Entity<entity_access_specifier>>, Entity<entity_class_or_decltype>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_access_specifier>, Opt<Keyword<R"raw(virtual)raw">>, Entity<entity_class_or_decltype>>>);
ENTITY(entity_class_or_decltype, Or<And<Opt<Entity<entity_nested_name_specifier>>, Entity<entity_type_name>>, And<Entity<entity_nested_name_specifier>, Keyword<R"raw(template)raw">, Entity<entity_simple_template_id>>, And<Entity<entity_computed_type_specifier>>>);
ENTITY(entity_access_specifier, Or<And<Keyword<R"raw(private)raw">>, And<Keyword<R"raw(protected)raw">>, And<Keyword<R"raw(public)raw">>>);
ENTITY(entity_ctor_initializer, Or<And<Terminal<R"raw(:)raw">, Entity<entity_mem_initializer_list>>>);
ENTITY(entity_mem_initializer_list, And<Entity<entity_mem_initializer_list_impl_start>, List<Entity<entity_mem_initializer_list_impl_continue>, 0>>);
ENTITY(entity_mem_initializer_list_impl_start, Or<And<Entity<entity_mem_initializer>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_mem_initializer_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_mem_initializer>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_mem_initializer, Or<And<Entity<entity_mem_initializer_id>, Terminal<R"raw(()raw">, Opt<Entity<entity_expression_list>>, Terminal<R"raw())raw">>, And<Entity<entity_mem_initializer_id>, Entity<entity_braced_init_list>>>);
ENTITY(entity_mem_initializer_id, Or<And<Entity<entity_class_or_decltype>>, And<Entity<entity_identifier>>>);
ENTITY(entity_operator_function_id, Or<And<Keyword<R"raw(operator)raw">, Entity<entity_operator>>>);
ENTITY(entity_operator, Or<And<Terminal<R"raw(new)raw">>, And<Terminal<R"raw(delete)raw">>, And<Terminal<R"raw(new[])raw">>, And<Terminal<R"raw(delete[])raw">>, And<Terminal<R"raw(co_await)raw">>, And<Terminal<R"raw(())raw">>, And<Terminal<R"raw([])raw">>, And<Terminal<R"raw(->)raw">>, And<Terminal<R"raw(->*)raw">>, And<Terminal<R"raw(~)raw">>, And<Terminal<R"raw(!)raw">>, And<Terminal<R"raw(+)raw">>, And<Terminal<R"raw(-)raw">>, And<Terminal<R"raw(*)raw">>, And<Terminal<R"raw(/)raw">>, And<Terminal<R"raw(%)raw">>, And<Terminal<R"raw(^)raw">>, And<Terminal<R"raw(&)raw">>, And<Terminal<R"raw(|)raw">>, And<Terminal<R"raw(=)raw">>, And<Terminal<R"raw(+=)raw">>, And<Terminal<R"raw(-=)raw">>, And<Terminal<R"raw(*=)raw">>, And<Terminal<R"raw(/=)raw">>, And<Terminal<R"raw(%=)raw">>, And<Terminal<R"raw(^=)raw">>, And<Terminal<R"raw(&=)raw">>, And<Terminal<R"raw(|=)raw">>, And<Terminal<R"raw(==)raw">>, And<Terminal<R"raw(!=)raw">>, And<Terminal<R"raw(<)raw">>, And<Terminal<R"raw(>)raw">>, And<Terminal<R"raw(<=)raw">>, And<Terminal<R"raw(>=)raw">>, And<Terminal<R"raw(<=>)raw">>, And<Terminal<R"raw(&&)raw">>, And<Terminal<R"raw(||)raw">>, And<Terminal<R"raw(<<)raw">>, And<Terminal<R"raw(>>)raw">>, And<Terminal<R"raw(<<=)raw">>, And<Terminal<R"raw(>>=)raw">>, And<Terminal<R"raw(++)raw">>, And<Terminal<R"raw(--)raw">>, And<Terminal<R"raw(,)raw">>>);
ENTITY(entity_literal_operator_id, Or<And<Keyword<R"raw(operator)raw">, Entity<entity_unevaluated_string>, Entity<entity_identifier>>, And<Keyword<R"raw(operator)raw">, Entity<entity_user_defined_string_literal>>>);
ENTITY(entity_template_declaration, Or<And<Entity<entity_template_head>, Entity<entity_declaration>>, And<Entity<entity_template_head>, Entity<entity_concept_definition>>>);
ENTITY(entity_template_head, Or<And<Keyword<R"raw(template)raw">, Terminal<R"raw(<)raw">, Entity<entity_template_parameter_list>, Terminal<R"raw(>)raw">, Opt<Entity<entity_requires_clause>>>>);
ENTITY(entity_template_parameter_list, And<Entity<entity_template_parameter_list_impl_start>, List<Entity<entity_template_parameter_list_impl_continue>, 0>>);
ENTITY(entity_template_parameter_list_impl_start, Or<And<Entity<entity_template_parameter>>>);
ENTITY(entity_template_parameter_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_template_parameter>>>);
ENTITY(entity_requires_clause, Or<And<Keyword<R"raw(requires)raw">, Entity<entity_constraint_logical_or_expression>>>);
ENTITY(entity_constraint_logical_or_expression, And<Entity<entity_constraint_logical_or_expression_impl_start>, List<Entity<entity_constraint_logical_or_expression_impl_continue>, 0>>);
ENTITY(entity_constraint_logical_or_expression_impl_start, Or<And<Entity<entity_constraint_logical_and_expression>>>);
ENTITY(entity_constraint_logical_or_expression_impl_continue, Or<And<Terminal<R"raw(||)raw">, Entity<entity_constraint_logical_and_expression>>>);
ENTITY(entity_constraint_logical_and_expression, And<Entity<entity_constraint_logical_and_expression_impl_start>, List<Entity<entity_constraint_logical_and_expression_impl_continue>, 0>>);
ENTITY(entity_constraint_logical_and_expression_impl_start, Or<And<Entity<entity_primary_expression>>>);
ENTITY(entity_constraint_logical_and_expression_impl_continue, Or<And<Terminal<R"raw(&&)raw">, Entity<entity_primary_expression>>>);
ENTITY(entity_template_parameter, Or<And<Entity<entity_type_parameter>>, And<Entity<entity_parameter_declaration>>>);
ENTITY(entity_type_parameter, Or<And<Entity<entity_type_parameter_key>, Opt<Terminal<R"raw(...)raw">>, Opt<Entity<entity_identifier>>>, And<Entity<entity_type_parameter_key>, Opt<Entity<entity_identifier>>, Terminal<R"raw(=)raw">, Entity<entity_type_id>>, And<Entity<entity_type_constraint>, Opt<Terminal<R"raw(...)raw">>, Opt<Entity<entity_identifier>>>, And<Entity<entity_type_constraint>, Opt<Entity<entity_identifier>>, Terminal<R"raw(=)raw">, Entity<entity_type_id>>, And<Entity<entity_template_head>, Entity<entity_type_parameter_key>, Opt<Terminal<R"raw(...)raw">>, Opt<Entity<entity_identifier>>>, And<Entity<entity_template_head>, Entity<entity_type_parameter_key>, Opt<Entity<entity_identifier>>, Terminal<R"raw(=)raw">, Entity<entity_id_expression>>>);
ENTITY(entity_type_parameter_key, Or<And<Keyword<R"raw(class)raw">>, And<Keyword<R"raw(typename)raw">>>);
ENTITY(entity_type_constraint, Or<And<Opt<Entity<entity_nested_name_specifier>>, Entity<entity_concept_name>>, And<Opt<Entity<entity_nested_name_specifier>>, Entity<entity_concept_name>, Terminal<R"raw(<)raw">, Opt<Entity<entity_template_argument_list>>, Terminal<R"raw(>)raw">>>);
ENTITY(entity_simple_template_id, Or<And<Entity<entity_template_name>, Terminal<R"raw(<)raw">, Opt<Entity<entity_template_argument_list>>, Terminal<R"raw(>)raw">>>);
ENTITY(entity_template_id, Or<And<Entity<entity_simple_template_id>>, And<Entity<entity_operator_function_id>, Terminal<R"raw(<)raw">, Opt<Entity<entity_template_argument_list>>, Terminal<R"raw(>)raw">>, And<Entity<entity_literal_operator_id>, Terminal<R"raw(<)raw">, Opt<Entity<entity_template_argument_list>>, Terminal<R"raw(>)raw">>>);
ENTITY(entity_template_name, Or<And<Entity<entity_identifier>>>);
ENTITY(entity_template_argument_list, And<Entity<entity_template_argument_list_impl_start>, List<Entity<entity_template_argument_list_impl_continue>, 0>>);
ENTITY(entity_template_argument_list_impl_start, Or<And<Entity<entity_template_argument>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_template_argument_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_template_argument>, Opt<Terminal<R"raw(...)raw">>>>);
ENTITY(entity_template_argument, Or<And<Entity<entity_constant_expression>>, And<Entity<entity_type_id>>, And<Entity<entity_id_expression>>, And<Entity<entity_braced_init_list>>>);
ENTITY(entity_constraint_expression, Or<And<Entity<entity_logical_or_expression>>>);
ENTITY(entity_deduction_guide, Or<And<Opt<Entity<entity_explicit_specifier>>, Entity<entity_template_name>, Terminal<R"raw(()raw">, Entity<entity_parameter_declaration_clause>, Terminal<R"raw())raw">, Terminal<R"raw(->)raw">, Entity<entity_simple_template_id>, Opt<Entity<entity_requires_clause>>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_concept_definition, Or<And<Keyword<R"raw(concept)raw">, Entity<entity_concept_name>, Opt<Entity<entity_attribute_specifier_seq>>, Terminal<R"raw(=)raw">, Entity<entity_constraint_expression>, Terminal<R"raw(;)raw">>>);
ENTITY(entity_concept_name, Or<And<Entity<entity_identifier>>>);
ENTITY(entity_typename_specifier, Or<And<Keyword<R"raw(typename)raw">, Entity<entity_nested_name_specifier>, Entity<entity_identifier>>, And<Keyword<R"raw(typename)raw">, Entity<entity_nested_name_specifier>, Opt<Terminal<R"raw(template)raw">>, Entity<entity_simple_template_id>>>);
ENTITY(entity_explicit_instantiation, Or<And<Opt<Keyword<R"raw(extern)raw">>, Keyword<R"raw(template)raw">, Entity<entity_declaration>>>);
ENTITY(entity_explicit_specialization, Or<And<Keyword<R"raw(template)raw">, Terminal<R"raw(<)raw">, Terminal<R"raw(>)raw">, Entity<entity_declaration>>>);
ENTITY(entity_try_block, Or<And<Keyword<R"raw(try)raw">, Entity<entity_compound_statement>, Entity<entity_handler_seq>>>);
ENTITY(entity_function_try_block, Or<And<Keyword<R"raw(try)raw">, Opt<Entity<entity_ctor_initializer>>, Entity<entity_compound_statement>, Entity<entity_handler_seq>>>);
ENTITY(entity_handler_seq, List<Entity<entity_handler>>);
ENTITY(entity_handler, Or<And<Keyword<R"raw(catch)raw">, Terminal<R"raw(()raw">, Entity<entity_exception_declaration>, Terminal<R"raw())raw">, Entity<entity_compound_statement>>>);
ENTITY(entity_exception_declaration, Or<And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_type_specifier_seq>, Entity<entity_declarator>>, And<Opt<Entity<entity_attribute_specifier_seq>>, Entity<entity_type_specifier_seq>, Opt<Entity<entity_abstract_declarator>>>, And<Terminal<R"raw(...)raw">>>);
ENTITY(entity_noexcept_specifier, Or<And<Keyword<R"raw(noexcept)raw">, Terminal<R"raw(()raw">, Entity<entity_constant_expression>, Terminal<R"raw())raw">>, And<Keyword<R"raw(noexcept)raw">>>);
ENTITY(entity_preprocessing_file, Or<And<Opt<Entity<entity_group>>>, And<Entity<entity_module_file>>>);
ENTITY(entity_module_file, Or<And<Opt<Entity<entity_pp_global_module_fragment>>, Entity<entity_pp_module>, Opt<Entity<entity_group>>, Opt<Entity<entity_pp_private_module_fragment>>>>);
ENTITY(entity_pp_global_module_fragment, Or<And<Keyword<R"raw(module)raw">, Terminal<R"raw(;)raw">, Entity<entity_new_line>, Opt<Entity<entity_group>>>>);
ENTITY(entity_pp_private_module_fragment, Or<And<Keyword<R"raw(module)raw">, Terminal<R"raw(:)raw">, Keyword<R"raw(private)raw">, Terminal<R"raw(;)raw">, Entity<entity_new_line>, Opt<Entity<entity_group>>>>);
ENTITY(entity_group, List<Entity<entity_group_part>>);
ENTITY(entity_group_part, Or<And<Entity<entity_control_line>>, And<Entity<entity_if_section>>, And<Entity<entity_text_line>>, And<Terminal<R"raw(#)raw">, Entity<entity_conditionally_supported_directive>>>);
ENTITY(entity_control_line, Or<And<Terminal<R"raw(#)raw">, Terminal<R"raw(include)raw">, Entity<entity_pp_tokens>, Entity<entity_new_line>>, And<Entity<entity_pp_import>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(define)raw">, Entity<entity_identifier>, Entity<entity_replacement_list>, Entity<entity_new_line>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(define)raw">, Entity<entity_identifier>, Entity<entity_lparen>, Opt<Entity<entity_identifier_list>>, Terminal<R"raw())raw">, Entity<entity_replacement_list>, Entity<entity_new_line>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(define)raw">, Entity<entity_identifier>, Entity<entity_lparen>, Terminal<R"raw(...)raw">, Terminal<R"raw())raw">, Entity<entity_replacement_list>, Entity<entity_new_line>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(define)raw">, Entity<entity_identifier>, Entity<entity_lparen>, Entity<entity_identifier_list>, Terminal<R"raw(,)raw">, Terminal<R"raw(...)raw">, Terminal<R"raw())raw">, Entity<entity_replacement_list>, Entity<entity_new_line>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(undef)raw">, Entity<entity_identifier>, Entity<entity_new_line>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(line)raw">, Entity<entity_pp_tokens>, Entity<entity_new_line>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(error)raw">, Opt<Entity<entity_pp_tokens>>, Entity<entity_new_line>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(warning)raw">, Opt<Entity<entity_pp_tokens>>, Entity<entity_new_line>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(pragma)raw">, Opt<Entity<entity_pp_tokens>>, Entity<entity_new_line>>, And<Terminal<R"raw(#)raw">, Entity<entity_new_line>>>);
ENTITY(entity_if_section, Or<And<Entity<entity_if_group>, Opt<Entity<entity_elif_groups>>, Opt<Entity<entity_else_group>>, Entity<entity_endif_line>>>);
ENTITY(entity_if_group, Or<And<Terminal<R"raw(#)raw">, Terminal<R"raw(if)raw">, Entity<entity_constant_expression>, Entity<entity_new_line>, Opt<Entity<entity_group>>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(ifdef)raw">, Entity<entity_identifier>, Entity<entity_new_line>, Opt<Entity<entity_group>>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(ifndef)raw">, Entity<entity_identifier>, Entity<entity_new_line>, Opt<Entity<entity_group>>>>);
ENTITY(entity_elif_groups, List<Entity<entity_elif_group>>);
ENTITY(entity_elif_group, Or<And<Terminal<R"raw(#)raw">, Terminal<R"raw(elif)raw">, Entity<entity_constant_expression>, Entity<entity_new_line>, Opt<Entity<entity_group>>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(elifdef)raw">, Entity<entity_identifier>, Entity<entity_new_line>, Opt<Entity<entity_group>>>, And<Terminal<R"raw(#)raw">, Terminal<R"raw(elifndef)raw">, Entity<entity_identifier>, Entity<entity_new_line>, Opt<Entity<entity_group>>>>);
ENTITY(entity_else_group, Or<And<Terminal<R"raw(#)raw">, Terminal<R"raw(else)raw">, Entity<entity_new_line>, Opt<Entity<entity_group>>>>);
ENTITY(entity_endif_line, Or<And<Terminal<R"raw(#)raw">, Terminal<R"raw(endif)raw">, Entity<entity_new_line>>>);
ENTITY(entity_text_line, Or<And<Opt<Entity<entity_pp_tokens>>, Entity<entity_new_line>>>);
ENTITY(entity_conditionally_supported_directive, Or<And<Entity<entity_pp_tokens>, Entity<entity_new_line>>>);
ENTITY(entity_lparen, Or<And<UnimplementedTODO<> /* descr{ 'a' terminal{ '(' } 'character' 'not' 'immediately' 'preceded' 'by' 'whitespace' } */>>);
ENTITY(entity_identifier_list, And<Entity<entity_identifier_list_impl_start>, List<Entity<entity_identifier_list_impl_continue>, 0>>);
ENTITY(entity_identifier_list_impl_start, Or<And<Entity<entity_identifier>>>);
ENTITY(entity_identifier_list_impl_continue, Or<And<Terminal<R"raw(,)raw">, Entity<entity_identifier>>>);
ENTITY(entity_replacement_list, Or<And<Opt<Entity<entity_pp_tokens>>>>);
ENTITY(entity_pp_tokens, List<Entity<entity_preprocessing_token>>);
ENTITY(entity_defined_macro_expression, Or<And<Terminal<R"raw(defined)raw">, Entity<entity_identifier>>, And<Terminal<R"raw(defined)raw">, Terminal<R"raw(()raw">, Entity<entity_identifier>, Terminal<R"raw())raw">>>);
ENTITY(entity_h_preprocessing_token, Or<And<UnimplementedTODO<> /* textnormal{ 'any' grammarterm{ 'preprocessing-token' } 'other' 'than' terminal{ '>' } } */>>);
ENTITY(entity_h_pp_tokens, List<Entity<entity_h_preprocessing_token>>);
ENTITY(entity_header_name_tokens, Or<And<Entity<entity_string_literal>>, And<Terminal<R"raw(<)raw">, Entity<entity_h_pp_tokens>, Terminal<R"raw(>)raw">>>);
ENTITY(entity_has_include_expression, Or<And<UnimplementedTODO<> /* xname{ 'has_include' } */, Terminal<R"raw(()raw">, Entity<entity_header_name>, Terminal<R"raw())raw">>, And<UnimplementedTODO<> /* xname{ 'has_include' } */, Terminal<R"raw(()raw">, Entity<entity_header_name_tokens>, Terminal<R"raw())raw">>>);
ENTITY(entity_has_attribute_expression, Or<And<UnimplementedTODO<> /* xname{ 'has_cpp_attribute' } */, Terminal<R"raw(()raw">, Entity<entity_pp_tokens>, Terminal<R"raw())raw">>>);
ENTITY(entity_pp_module, Or<And<Opt<Keyword<R"raw(export)raw">>, Keyword<R"raw(module)raw">, Opt<Entity<entity_pp_tokens>>, Terminal<R"raw(;)raw">, Entity<entity_new_line>>>);
ENTITY(entity_pp_import, Or<And<Opt<Keyword<R"raw(export)raw">>, Keyword<R"raw(import)raw">, Entity<entity_header_name>, Opt<Entity<entity_pp_tokens>>, Terminal<R"raw(;)raw">, Entity<entity_new_line>>, And<Opt<Keyword<R"raw(export)raw">>, Keyword<R"raw(import)raw">, Entity<entity_header_name_tokens>, Opt<Entity<entity_pp_tokens>>, Terminal<R"raw(;)raw">, Entity<entity_new_line>>, And<Opt<Keyword<R"raw(export)raw">>, Keyword<R"raw(import)raw">, Entity<entity_pp_tokens>, Terminal<R"raw(;)raw">, Entity<entity_new_line>>>);
ENTITY(entity_va_opt_replacement, Or<And<UnimplementedTODO<> /* mname{ 'VA_OPT' } */, Terminal<R"raw(()raw">, Opt<Entity<entity_pp_tokens>>, Terminal<R"raw())raw">>>);
